<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>错误和异常 on jupyter.fun</title>
    <link>/python/13_exception/</link>
    <description>Recent content in 错误和异常 on jupyter.fun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-ch</language>
    <lastBuildDate>Sun, 07 Aug 2022 16:07:59 +0800</lastBuildDate><atom:link href="/python/13_exception/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>处理异常</title>
      <link>/python/13_exception/02_handling/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/13_exception/02_handling/</guid>
      <description>异常处理通过 try 语句（详细语法及使用规则见 try 语句）来实现。
通过 try 语句处理程序已经出现或可能出现异常，使代码能够继续执行，否则异常未被处理，程序终止执行。
例如下列代码要求用户输入有效的整数：
while True: try: x = int(input(&amp;#34;Please enter a number: &amp;#34;)) break except ValueError: print(&amp;#34;Oops! That was no valid number. Try again...&amp;#34;) Please enter a number: 3.14Oops! That was no valid number. Try again...Please enter a number: 314try 语句的工作原理如下：
首先执行 try 子句；
如果没有异常发生，则跳过 except 子句并完成 try 语句的执行；
如果在执行 try 子句时发生了异常，则跳过该子句中剩下的部分。然后，如果异常的类型和 except 关键字后面的异常匹配，则执行 except 子句，然后继续执行 try 语句之后的代码；
如果发生的异常和 except 子句中指定的异常不匹配，则将其传递到外部的 try 语句中；如果没有找到处理程序，则它是一个未处理异常，执行将停止并显示异常信息。</description>
    </item>
    <item>
      <title>抛出异常</title>
      <link>/python/13_exception/03_raising/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/13_exception/03_raising/</guid>
      <description>raise 语句 允许强制发生指定的异常。
raise NameError(&amp;#39;HiThere&amp;#39;) ---------------------------------------------------------------------------NameError Traceback (most recent call last)&amp;lt;ipython-input-1-72c183edb298&amp;gt; in &amp;lt;module&amp;gt;----&amp;gt; 1 raise NameError(&#39;HiThere&#39;)NameError: HiThere如果你需要确定是否引发了异常但不打算处理它，则可以使用更简单的 raise 语句形式重新引发异常:
try: raise NameError(&amp;#39;HiThere&amp;#39;) except NameError: print(&amp;#39;An exception flew by!&amp;#39;) raise An exception flew by!---------------------------------------------------------------------------NameError Traceback (most recent call last)&amp;lt;ipython-input-2-bf6ef4926f8c&amp;gt; in &amp;lt;module&amp;gt;1 try:----&amp;gt; 2 raise NameError(&#39;HiThere&#39;)3 except NameError:4 print(&#39;An exception flew by!&#39;)5 raiseNameError: HiThere</description>
    </item>
    <item>
      <title>自定义异常</title>
      <link>/python/13_exception/04_user_defined/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/13_exception/04_user_defined/</guid>
      <description>可以通过创建新的异常类来自定义代码执行错误引发的异常。许多标准模块定义了它们自己的异常，以报告它们定义的函数中可能出现的错误。
异常通常应该直接或间接地从 Exception 类派生。定义的异常类，可以执行任何其他类可以执行的任何操作，但通常保持简单，只提供一些属性，这 些属性允许处理程序为异常提取有关错误的信息。
在创建可能引发多个不同错误的模块时，通常的做法是为该模块定义的异常创建基类，并为不同错误条件创建特定异常类的子类。大多数异常都定义为名称以 Error 结尾，类似于标准异常的命名:
class Error(Exception): &amp;#34;&amp;#34;&amp;#34;Base class for exceptions in this module.&amp;#34;&amp;#34;&amp;#34; pass class InputError(Error): &amp;#34;&amp;#34;&amp;#34;Exception raised for errors in the input. Attributes: expression -- input expression in which the error occurred message -- explanation of the error &amp;#34;&amp;#34;&amp;#34; def __init__(self, expression, message): self.expression = expression self.message = message class TransitionError(Error): &amp;#34;&amp;#34;&amp;#34;Raised when an operation attempts a state transition that&amp;#39;s not allowed. Attributes: previous -- state at beginning of transition next -- attempted new state message -- explanation of why the specific transition is not allowed &amp;#34;&amp;#34;&amp;#34; def __init__(self, previous, next, message): self.</description>
    </item>
    <item>
      <title>finally 清理操作</title>
      <link>/python/13_exception/05_finally/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/13_exception/05_finally/</guid>
      <description>try 语句有另一个可选子句 finally，用于定义必须在所有情况下执行的清理操作（详见 try 语句）。
例如，在 finally 子句中关闭打开的文件：
def read_file(): try: f = open(&amp;#39;../11_built-in_function/test.txt&amp;#39;, encoding=&amp;#39;utf-8&amp;#39;) return f.read() except OSError: print(&amp;#39;不能打开&amp;#39;) finally: print(&amp;#39;执行清理操作&amp;#39;) f.close() read_file() # 先执行关闭，在执行返回 执行清理操作&#39;xue.cn\n\n自学是门手艺&#39;如果 finally 子句中引发了新的异常，清理操作本身无效，则达不到清理目的：
def read_file(): try: f = open(&amp;#39;../11_built-in_function/test.txt&amp;#39;, encoding=&amp;#39;utf-8&amp;#39;) return f.read() except OSError: print(&amp;#39;不能打开&amp;#39;) finally: print(执行清理操作) # 清理操作引发异常 f.close() read_file() ---------------------------------------------------------------------------NameError Traceback (most recent call last)&amp;lt;ipython-input-13-af7cdb6d88f0&amp;gt; in &amp;lt;module&amp;gt;10 f.close()11 ---&amp;gt; 12 read_file() # 先执行关闭，在执行返回&amp;lt;ipython-input-13-af7cdb6d88f0&amp;gt; in read_file()7 print(&#39;不能打开&#39;)8 finally:----&amp;gt; 9 print(执行清理操作) # 清理操作引发异常10 f.</description>
    </item>
  </channel>
</rss>