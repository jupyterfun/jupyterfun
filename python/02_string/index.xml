<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>字符串概述 on jupyter.fun</title>
    <link>/python/02_string/</link>
    <description>Recent content in 字符串概述 on jupyter.fun</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 07 Aug 2022 16:07:59 +0800</lastBuildDate><atom:link href="/python/02_string/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>字符串拼接</title>
      <link>/python/02_string/02_concatenated_string/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/02_concatenated_string/</guid>
      <description>空格拼接 相邻的两个字符串，无论中间隔了多少个空格（包括 0 个），都会自动连接到一起：
&amp;#39;Py&amp;#39;&amp;#39;thon&amp;#39;, &amp;#39;Py&amp;#39; &amp;#39;thon&amp;#39; (&#39;Python&#39;, &#39;Python&#39;)甚至可以用 () 包围实现换行拼接，这在字符串（或正则表达式）很长时非常有用：
(&amp;#39;Py&amp;#39; f&amp;#39;thon{3}&amp;#39; r&amp;#39;\Go&amp;#39;) &#39;Python3\\Go&#39;运算符 + 拼接 运算符 + 拼接字符串，和空格类似，但 + 拼接字符串可以是变量的形式：
a = &amp;#39;Py&amp;#39; b = &amp;#39;thon&amp;#39; &amp;#39;Py&amp;#39; + b, a + b (&#39;Python&#39;, &#39;Python&#39;)运算符 + 还可以和赋值运算符 = 连用，拼接字符串的同时进行赋值：
# 将 a 和 b 拼接，赋值给 a a += b print(a) # 将 b 和 a 拼接，赋值给 b b += a b Python&#39;thonPython&#39;</description>
    </item>
    <item>
      <title>转义字符</title>
      <link>/python/02_string/03_escape_character/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/03_escape_character/</guid>
      <description>转义字符 \ 本身不被当作字符，如果要表示一个字符 \，需要自己将自己转义：
&amp;#39;\\&amp;#39; &#39;\\&#39;&amp;#39;\&amp;#39; File &amp;quot;&amp;lt;ipython-input-2-d44a383620ab&amp;gt;&amp;quot;, line 1&#39;\&#39;^SyntaxError: EOL while scanning string literal上面这一行报错信息是 SyntaxError: EOL while scanning string literal。这是因为 \&#39; 表示的是单引号字符 &#39;（Literal）—— 是可被输出到屏幕的 &#39;，而不是用来标示字符串的那个 &#39;—— 别急，无论哪个初学者第一次读到前面的句子都觉得有点莫名其妙…… —— 于是，Python 编译器扫描这个 “字符串” 的时候，还没找到标示字符串末尾的另外一个 &#39; 的时候就读到了 EOL（End Of Line）。
如果你想输出这么个字符串，He said, it&amp;rsquo;s fine.，如果用双引号扩起来 &amp;quot; 倒没啥问题，但是如果用单引号扩起来就麻烦了，因为编译器会把 it 后面的那个单引号 &#39; 当作字符串结尾。
&amp;#39;He said, it&amp;#39;s fine.&amp;#39; File &amp;quot;&amp;lt;ipython-input-3-2bcf2ca6dd95&amp;gt;&amp;quot;, line 1&#39;He said, it&#39;s fine.&#39;^SyntaxError: invalid syntax于是你就得用转义符 \：</description>
    </item>
    <item>
      <title>str.count 统计</title>
      <link>/python/02_string/04_str.count/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/04_str.count/</guid>
      <description>字符串方法 str.count()，Python 官方文档描述如下：
help(str.count) Help on method_descriptor:count(...)S.count(sub[, start[, end]]) -&amp;gt; intReturn the number of non-overlapping occurrences of substring sub instring S[start:end]. Optional arguments start and end areinterpreted as in slice notation.返回回子字符串 sub 在 [start, end] 范围内非重叠出现的次数。可选参数 start 与 end 会被解读为切片表示法。
只给定 sub 一个参数的话，于是从第一个字符开始搜索到字符串结束；如果，随后给定了一个可选参数的话，那么它是 start，于是从 start 开始，搜索到字符串结束；如果 start 之后还有参数的话，那么它是 end；于是从 start 开始，搜索到 end - 1 结束（即不包含索引值为 end 的那个字符）。
&amp;#39;python&amp;#39;.count(&amp;#39;0&amp;#39;) 0&amp;#39;pyyython&amp;#39;.count(&amp;#39;yy&amp;#39;) 1&amp;#39;pythonpythonn&amp;#39;.count(&amp;#39;n&amp;#39;,5) 3&amp;#39;pythonpythonn&amp;#39;.count(&amp;#39;n&amp;#39;,5,7) 1</description>
    </item>
    <item>
      <title>str.replace 替换</title>
      <link>/python/02_string/05_str.replace/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/05_str.replace/</guid>
      <description>字符串方法 str.replace()，Python 官方文档描述如下：
help(str.replace) Help on method_descriptor:replace(self, old, new, count=-1, /)Return a copy with all occurrences of substring old replaced by new.countMaximum number of occurrences to replace.-1 (the default value) means replace all occurrences.If the optional argument count is given, only the first count occurrences arereplaced.返回字符串的副本，其中出现的所有子字符串 old 都将被替换为 new。如果给出了可选参数 count，则只替换前 count 次出现。
&amp;#39;python python&amp;#39;.replace(&amp;#39;p&amp;#39;,&amp;#39;C&amp;#39;) &#39;Cython Cython&#39;&amp;#39;python python&amp;#39;.replace(&amp;#39;py&amp;#39;,&amp;#39;Cpy&amp;#39;,1) &#39;Cpython python&#39;如果 old 为空字符串，则在每个字符之间（包括前后）插入 new：</description>
    </item>
    <item>
      <title>str.expandtabs 替换制表符</title>
      <link>/python/02_string/06_str.expandtabs/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/06_str.expandtabs/</guid>
      <description>字符串方法 str.expandtabs()，Python 官方文档描述如下：
help(str.expandtabs) Help on method_descriptor:expandtabs(self, /, tabsize=8)Return a copy where all tab characters are expanded using spaces.If tabsize is not given, a tab size of 8 characters is assumed.返回字符串的副本，其中所有的制表符会由一个或多个空格替换，具体取决于当前列位置和给定的制表符宽度。每 tabsize 个字符设为一个制表位（默认值 8 时设定的制表位在列 0, 8, 16 依次类推）。
要展开字符串，当前列将被设为零并逐一检查字符串中的每个字符。如果字符为制表符 (\t)，则会在结果中插入一个或多个空格符，直到当前列等于下一个制表位。（制表符本身不会被复制。）
如果字符为换行符 (\n) 或回车符 (\r)，它会被复制并将当前列重设为零。任何其他字符会被不加修改地复制并将当前列加一，不论该字符在被打印时会如何显示。
&amp;#39;01\t012\t0123\t01234&amp;#39;.expandtabs() &#39;01 012 0123 01234&#39;&amp;#39;01\t012\t0123\t01234&amp;#39;.expandtabs(4) &#39;01 012 0123 01234&#39;&amp;#39;\n\t01\r2\t0123\t01234&amp;#39;.expandtabs(4) &#39;\n 01\r2 0123 01234&#39;</description>
    </item>
    <item>
      <title>str.split 拆分</title>
      <link>/python/02_string/07_str.split/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/07_str.split/</guid>
      <description>字符串方法 str.split()，Python 官方文档描述如下：
help(str.split) Help on method_descriptor:split(self, /, sep=None, maxsplit=-1)Return a list of the words in the string, using sep as the delimiter string.sepThe delimiter according which to split the string.None (the default value) means split according to any whitespace,and discard empty strings from the result.maxsplitMaximum number of splits to do.-1 (the default value) means no limit.返回一个由字符串内单词组成的列表，使用 sep 作为分隔字符串。如果给出了 sep，则连续的分隔符不会被组合在一起而是被视为分隔空字符串；如果给出了 maxsplit，则最多进行 maxsplit 次拆分（因此，列表最多会有 maxsplit+1 个元素）。如果 maxsplit 未指定或为 -1，则不限制拆分次数（进行所有可能的拆分）。</description>
    </item>
    <item>
      <title>str.rsplit 拆分</title>
      <link>/python/02_string/08_str.rsplit/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/08_str.rsplit/</guid>
      <description>字符串方法 str.rsplit()，Python 官方文档描述如下：
help(str.rsplit) Help on method_descriptor:rsplit(self, /, sep=None, maxsplit=-1)Return a list of the words in the string, using sep as the delimiter string.sepThe delimiter according which to split the string.None (the default value) means split according to any whitespace,and discard empty strings from the result.maxsplitMaximum number of splits to do.-1 (the default value) means no limit.Splits are done starting at the end of the string and working to the front.</description>
    </item>
    <item>
      <title>str.partition 拆分</title>
      <link>/python/02_string/09_str.partition/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/09_str.partition/</guid>
      <description>字符串方法 str.partition()，Python 官方文档描述如下：
help(str.partition) Help on method_descriptor:partition(self, sep, /)Partition the string into three parts using the given separator.This will search for the separator in the string. If the separator is found,returns a 3-tuple containing the part before the separator, the separatoritself, and the part after it.If the separator is not found, returns a 3-tuple containing the original stringand two empty strings.在 sep 首次出现的位置拆分字符串，返回一个 3 元组，其中包含分隔符之前的部分、分隔符本身，以及分隔符之后的部分。如果分隔符未找到，则返回的 3 元组中包含字符本身以及两个空字符串。</description>
    </item>
    <item>
      <title>str.rpartition 拆分</title>
      <link>/python/02_string/10_str.rpartition/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/10_str.rpartition/</guid>
      <description>字符串方法 str.rpartition()，Python 官方文档描述如下：
help(str.rpartition) Help on method_descriptor:rpartition(self, sep, /)Partition the string into three parts using the given separator.This will search for the separator in the string, starting at the end. Ifthe separator is found, returns a 3-tuple containing the part before theseparator, the separator itself, and the part after it.If the separator is not found, returns a 3-tuple containing two empty stringsand the original string.</description>
    </item>
    <item>
      <title>str.splitlines 按行拆分</title>
      <link>/python/02_string/11_str.splitlines/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/11_str.splitlines/</guid>
      <description>字符串方法 str.splitlines()，Python 官方文档描述如下：
help(str.splitlines) Help on method_descriptor:splitlines(self, /, keepends=False)Return a list of the lines in the string, breaking at line boundaries.Line breaks are not included in the resulting list unless keepends is given andtrue.返回由原字符串中各行组成的列表，在行边界的位置拆分。结果列表中不包含行边界，除非给出了 keepends 且为真值。
此方法会以下列行边界进行拆分。特别地，行边界是 universal newlines 的一个超集。
\n 换行 \r 回车 \r\n 回车 + 换行 \v 或 \x0b 行制表符 \f 或 \x0c 换表单 \x1c 文件分隔符 \x1d 组分隔符 \x1e 记录分隔符 \x85 下一行 \u2028 行分隔符 \u2029 段分隔符 &amp;#39;ab c\n\nde fg\rkl\r\n&amp;#39;.</description>
    </item>
    <item>
      <title>str.strip 移除两边字符</title>
      <link>/python/02_string/12_str.strip/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/12_str.strip/</guid>
      <description>字符串方法 str.strip()，Python 官方文档描述如下：
help(str.strip) Help on method_descriptor:strip(self, chars=None, /)Return a copy of the string with leading and trailing whitespace remove.If chars is given and not None, remove characters in chars instead.返回原字符串的副本，移除其中的前导和末尾字符。chars 参数为指定要移除字符的字符串。如果省略或为 None，则 chars 参数默认移除空格符。实际上 chars 参数并非指定单个前缀或后缀；而是会移除参数值中的所有字符:
&amp;#39; python &amp;#39;.strip() &#39;python&#39;&amp;#39; python &amp;#39;.strip(&amp;#39;p&amp;#39;) &#39; python &#39;&amp;#39; python &amp;#39;.strip(&amp;#39;p n&amp;#39;) &#39;ytho&#39;&amp;#39; pythonnnn &amp;#39;.strip(&amp;#39;p n&amp;#39;) &#39;ytho&#39;</description>
    </item>
    <item>
      <title>str.lstrip 移除左边字符</title>
      <link>/python/02_string/13_str.lstrip/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/13_str.lstrip/</guid>
      <description>字符串方法 str.lstrip()，Python 官方文档描述如下：
help(str.lstrip) Help on method_descriptor:lstrip(self, chars=None, /)Return a copy of the string with leading whitespace removed.If chars is given and not None, remove characters in chars instead.返回原字符串的副本，移除其中的前导字符。chars 参数为指定要移除字符的字符串。如果省略或为 None，则 chars 参数默认移除空格符。实际上 chars 参数并非指定单个前缀；而是会移除参数值中出现的所有字符:
&amp;#39; python &amp;#39;.lstrip() &#39;python &#39;&amp;#39; python &amp;#39;.lstrip(&amp;#39;y p&amp;#39;) &#39;thon &#39;&amp;#39; python &amp;#39;.lstrip(&amp;#39;py&amp;#39;) &#39; python &#39;&amp;#39;ppppython &amp;#39;.lstrip(&amp;#39;y p&amp;#39;) &#39;thon &#39;</description>
    </item>
    <item>
      <title>str.rstrip 移除右边字符</title>
      <link>/python/02_string/14_str.rstrip/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/14_str.rstrip/</guid>
      <description>字符串方法 str.rstrip()，Python 官方文档描述如下：
help(str.rstrip) Help on method_descriptor:rstrip(self, chars=None, /)Return a copy of the string with trailing whitespace removed.If chars is given and not None, remove characters in chars instead.返回原字符串的副本，移除其中的末尾字符。chars 参数为指定要移除字符的字符串。如果省略或为 None，则 chars 参数默认移除空格符。实际上 chars 参数并非指定单个后缀；而是会移除参数值中的所有字符串:
&amp;#39; python &amp;#39;.rstrip() &#39; python&#39;&amp;#39; python &amp;#39;.rstrip(&amp;#39;n o&amp;#39;) &#39; pyth&#39;&amp;#39; python &amp;#39;.rstrip(&amp;#39;n&amp;#39;) &#39; python &#39;&amp;#39; pythonnnnn&amp;#39;.rstrip(&amp;#39;no&amp;#39;) &#39; pyth&#39;</description>
    </item>
    <item>
      <title>str.find 查找最小索引</title>
      <link>/python/02_string/15_str.find/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/15_str.find/</guid>
      <description>字符串方法 str.find()，Python 官方文档描述如下：
help(str.find) Help on method_descriptor:find(...)S.find(sub[, start[, end]]) -&amp;gt; intReturn the lowest index in S where substring sub is found,such that sub is contained within S[start:end]. Optionalarguments start and end are interpreted as in slice notation.Return -1 on failure.返回子字符串 sub 在 s[start:end] 切片内被找到的最小索引。可选参数 start 与 end 会被解读为切片表示法。如果 sub 未被找到则返回 -1。
只给定 sub 一个参数的话，于是从第一个字符开始搜索到字符串结束；如果，随后给定了一个可选参数的话，那么它是 start，于是从 start 开始，搜索到字符串结束；如果 start 之后还有参数的话，那么它是 end；于是从 start 开始，搜索到 end - 1 结束（即不包含索引值为 end 的那个字符）。</description>
    </item>
    <item>
      <title>str.rfind 查找最大索引</title>
      <link>/python/02_string/16_str.rfind/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/16_str.rfind/</guid>
      <description>字符串方法 str.rfind()，Python 官方文档描述如下：
help(str.rfind) Help on method_descriptor:rfind(...)S.rfind(sub[, start[, end]]) -&amp;gt; intReturn the highest index in S where substring sub is found,such that sub is contained within S[start:end]. Optionalarguments start and end are interpreted as in slice notation.Return -1 on failure.返回子字符串 sub 在字符串内被找到的最大（最右）索引，这样 sub 将包含在 s[start:end] 当中。可选参数 start 与 end 会被解读为切片表示法。如果未找到则返回 -1。
只给定 sub 一个参数的话，于是从第一个字符开始搜索到字符串结束；如果，随后给定了一个可选参数的话，那么它是 start，于是从 start 开始，搜索到字符串结束；如果 start 之后还有参数的话，那么它是 end；于是从 start 开始，搜索到 end - 1 结束（即不包含索引值为 end 的那个字符）。</description>
    </item>
    <item>
      <title>str.index 查找最小索引</title>
      <link>/python/02_string/17_str.index/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/17_str.index/</guid>
      <description>字符串方法 str.index()，Python 官方文档描述如下：
help(str.index) Help on method_descriptor:index(...)S.index(sub[, start[, end]]) -&amp;gt; intReturn the lowest index in S where substring sub is found,such that sub is contained within S[start:end]. Optionalarguments start and end are interpreted as in slice notation.Raises ValueError when the substring is not found.返回子字符串 sub 在 s[start:end] 切片内被找到的最小索引。可选参数 start 与 end 会被解读为切片表示法。类似于 find()，但在找不到 sub 时会引发 ValueError。
只给定 sub 一个参数的话，于是从第一个字符开始搜索到字符串结束；如果，随后给定了一个可选参数的话，那么它是 start，于是从 start 开始，搜索到字符串结束；如果 start 之后还有参数的话，那么它是 end；于是从 start 开始，搜索到 end - 1 结束（即不包含索引值为 end 的那个字符）。</description>
    </item>
    <item>
      <title>str.rindex 查找最大索引</title>
      <link>/python/02_string/18_str.rindex/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/18_str.rindex/</guid>
      <description>字符串方法 str.rindex()，Python 官方文档描述如下：
help(str.rindex) Help on method_descriptor:rindex(...)S.rindex(sub[, start[, end]]) -&amp;gt; intReturn the highest index in S where substring sub is found,such that sub is contained within S[start:end]. Optionalarguments start and end are interpreted as in slice notation.Raises ValueError when the substring is not found.返回子字符串 sub 在字符串内被找到的最大（最右）索引，这样 sub 将包含在 s[start:end] 当中。可选参数 start 与 end 会被解读为切片表示法。如果未找到则返回 -1。类似于 rfind()，但在子字符串 sub 未找到时会引发 ValueError。
只给定 sub 一个参数的话，于是从第一个字符开始搜索到字符串结束；如果，随后给定了一个可选参数的话，那么它是 start，于是从 start 开始，搜索到字符串结束；如果 start 之后还有参数的话，那么它是 end；于是从 start 开始，搜索到 end - 1 结束（即不包含索引值为 end 的那个字符）。</description>
    </item>
    <item>
      <title>str.join 拼接字符串</title>
      <link>/python/02_string/19_str.join/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/19_str.join/</guid>
      <description>字符串方法 str.join()，Python 官方文档描述如下：
help(str.join) Help on method_descriptor:join(self, iterable, /)Concatenate any number of strings.The string whose method is called is inserted in between each given string.The result is returned as a new string.Example: &#39;.&#39;.join([&#39;ab&#39;, &#39;pq&#39;, &#39;rs&#39;]) -&amp;gt; &#39;ab.pq.rs&#39;返回一个由 iterable 中的字符串拼接而成的字符串。如果 iterable 中存在任何非字符串值则会引发 TypeError。调用该方法的字符串将作为元素之间的分隔。
&amp;#39;~&amp;#39;.join(&amp;#39;abc&amp;#39;) &#39;a~b~c&#39;&amp;#39;acb&amp;#39;.join([&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;]) &#39;1acb2&#39;&amp;#39;&amp;#39;.join([&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;]) &#39;12&#39;&amp;#39;-&amp;#39;.join({&amp;#39;1&amp;#39;:1,&amp;#39;2&amp;#39;:2}) &#39;1-2&#39;&amp;#39;-&amp;#39;.join([&amp;#39;1&amp;#39;,2]) ---------------------------------------------------------------------------TypeError Traceback (most recent call last)&amp;lt;ipython-input-9-fc346e5ca62e&amp;gt; in &amp;lt;module&amp;gt;----&amp;gt; 1 &#39;-&#39;.join([&#39;1&#39;,2])TypeError: sequence item 1: expected str instance, int found&amp;#39;-&amp;#39;.</description>
    </item>
    <item>
      <title>str.startswith 指定字符串开头？</title>
      <link>/python/02_string/20_str.startswith/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/20_str.startswith/</guid>
      <description>字符串方法 str.startswith()，Python 官方文档描述如下：
help(str.startswith) Help on method_descriptor:startswith(...)S.startswith(prefix[, start[, end]]) -&amp;gt; boolReturn True if S starts with the specified prefix, False otherwise.With optional start, test S beginning at that position.With optional end, stop comparing S at that position.prefix can also be a tuple of strings to try.如果字符串以指定的 prefix 开始则返回 True，否则返回 False。prefix 也可以为由多个供查找的前缀构成的元组。如果有可选项 start，将从所指定位置开始检查。如果有可选项 end，将在所指定位置之前停止比较。
&amp;#39;a.b.a.c&amp;#39;.startswith(&amp;#39;ab&amp;#39;) False&amp;#39;a.b.a.c&amp;#39;.startswith(&amp;#39;a.&amp;#39;) True&amp;#39;a.b.a.c&amp;#39;.startswith(&amp;#39;ab&amp;#39;,2) False&amp;#39;a.b.a.c&amp;#39;.startswith(&amp;#39;a.&amp;#39;,4) True&amp;#39;a.b.a.c&amp;#39;.startswith(&amp;#39;a&amp;#39;,1,4) False</description>
    </item>
    <item>
      <title>str.endswith 指定字符串结尾？</title>
      <link>/python/02_string/21_str.endswith/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/21_str.endswith/</guid>
      <description>字符串方法 str.endswith()，Python 官方文档描述如下：
help(str.endswith) Help on method_descriptor:endswith(...)S.endswith(suffix[, start[, end]]) -&amp;gt; boolReturn True if S ends with the specified suffix, False otherwise.With optional start, test S beginning at that position.With optional end, stop comparing S at that position.suffix can also be a tuple of strings to try.如果字符串以指定的 suffix 结束返回 True，否则返回 False。suffix 也可以为由多个供查找的后缀构成的元组。如果有可选项 start，将从所指定位置开始检查。如果有可选项 end，将在所指定位置之前停止比较。
&amp;#39;python.exe&amp;#39;.endswith(&amp;#39;.exe&amp;#39;) True&amp;#39;python.exe&amp;#39;.endswith((&amp;#39;.exe&amp;#39;,&amp;#39;.txt&amp;#39;), 5) True&amp;#39;python.exe&amp;#39;.endswith((&amp;#39;.py&amp;#39;,&amp;#39;.txt&amp;#39;), 5) False&amp;#39;python.exe&amp;#39;.endswith((&amp;#39;.exe&amp;#39;,&amp;#39;.txt&amp;#39;), 5,9) False</description>
    </item>
    <item>
      <title>str.ljust 左对齐</title>
      <link>/python/02_string/22_str.ljust/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/22_str.ljust/</guid>
      <description>字符串方法 str.ljust()，Python 官方文档描述如下：
help(str.ljust) Help on method_descriptor:ljust(self, width, fillchar=&#39; &#39;, /)Return a left-justified string of length width.Padding is done using the specified fill character (default is a space).返回长度为 width 的字符串，原字符串在其中靠左对齐。使用指定的 fillchar 填充空位 (默认使用 ASCII 空格符)。如果 width 小于等于字符串长度 len(str) 则返回原字符串的副本。
&amp;#39;python&amp;#39;.ljust(1) &#39;python&#39;&amp;#39;python&amp;#39;.ljust(10,&amp;#39;~&amp;#39;) &#39;python~~~~&#39;&amp;#39;python&amp;#39;.ljust(10) &#39;python &#39;</description>
    </item>
    <item>
      <title>str.center 居中</title>
      <link>/python/02_string/23_str.center/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/23_str.center/</guid>
      <description>字符串方法 str.center()，Python 官方文档描述如下：
help(str.center) Help on method_descriptor:center(self, width, fillchar=&#39; &#39;, /)Return a centered string of length width.Padding is done using the specified fill character (default is a space).返回长度为 width 的字符串，原字符串在其正中。使用指定的 fillchar 填充两边的空位（默认使用ASCII 空格符）。如果 width 小于等于字符串长度，则返回原字符串的副本:
&amp;#39;Python&amp;#39;.center(1) &#39;Python&#39;&amp;#39;Python&amp;#39;.center(10) &#39; Python &#39;&amp;#39;Python&amp;#39;.center(20,&amp;#39;~&amp;#39;) &#39;~~~~~~~Python~~~~~~~&#39;</description>
    </item>
    <item>
      <title>str.rjust 右对齐</title>
      <link>/python/02_string/24_str.rjust/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/24_str.rjust/</guid>
      <description>字符串方法 str.rjust()，Python 官方文档描述如下：
help(str.rjust) Help on method_descriptor:rjust(self, width, fillchar=&#39; &#39;, /)Return a right-justified string of length width.Padding is done using the specified fill character (default is a space).返回长度为 width 的字符串，原字符串在其中靠右对齐。使用指定的 fillchar 填充空位 (默认使用 ASCII 空格符)。如果 width 小于等于字符串长度 len(str) 则返回原字符串的副本。
&amp;#39;python&amp;#39;.rjust(1) &#39;python&#39;&amp;#39;python&amp;#39;.rjust(10,&amp;#39;~&amp;#39;) &#39;~~~~python&#39;&amp;#39;python&amp;#39;.rjust(10) &#39; python&#39;</description>
    </item>
    <item>
      <title>str.format 格式化</title>
      <link>/python/02_string/25_str.format/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/25_str.format/</guid>
      <description>字符串方法 str.format()，Python 官方文档描述如下：
help(str.format) Help on method_descriptor:format(...)S.format(*args, **kwargs) -&amp;gt; strReturn a formatted version of S, using substitutions from args and kwargs.The substitutions are identified by braces (&#39;{&#39; and &#39;}&#39;).执行字符串格式化操作。调用此方法的字符串可以包含字符串字面值或者以花括号 {} 括起来的替换域。每个替换域可以包含一个位置参数的数字索引，或者一个关键字参数的名称。返回的字符串副本中每个替换域都会被替换为对应参数的字符串值。
&amp;#34;The sum of 1 + 2 is {0}&amp;#34;.format(1+2) &#39;The sum of 1 + 2 is 3&#39;如果你需要在字面文本中包含花括号字符，可以通过重复来转义:
&amp;#34;{{python}}&amp;#34;.format() &#39;{python}&#39;位置传参和关键字传参方式非常灵活，多个位置索引依次为 0,1,2……，且可以不插入字符串中；关键字传参则需要将关键字插入字符串中：
&amp;#39;{} and {} are both {age} years old.\ &amp;#39;.format(&amp;#39;A&amp;#39;,&amp;#39;B&amp;#39;,age=18) &#39;A and B are both 18 years old.</description>
    </item>
    <item>
      <title>str.format_map 格式化</title>
      <link>/python/02_string/26_str.format_map/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/26_str.format_map/</guid>
      <description>字符串方法 str.format_map()，Python 官方文档描述如下：
help(str.format_map) Help on method_descriptor:format_map(...)S.format_map(mapping) -&amp;gt; strReturn a formatted version of S, using substitutions from mapping.The substitutions are identified by braces (&#39;{&#39; and &#39;}&#39;).类似于 str.format(**mapping)，不同之处在于 mapping 会被直接使用。适宜使用此方法的一个例子是当 mapping 为 dict 的子类的情况：
# 创建一个字典子类型，当 键值对 不存在时，返回键 class Default(dict): def __missing__(self, key): return key d = Default(a=1) d[&amp;#39;a&amp;#39;], d[&amp;#39;b&amp;#39;] (1, &#39;b&#39;)# country 键值对不存在，所以直接格式化键 ‘country’ &amp;#39;{name} was born in {country}&amp;#39;.format_map( Default(name=&amp;#39;Guido&amp;#39;)) &#39;Guido was born in country&#39;与 format 格式化对比：</description>
    </item>
    <item>
      <title>f-string 格式化字符串</title>
      <link>/python/02_string/27_f-string/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/27_f-string/</guid>
      <description>f-string 即格式化字符串字面值。字符串以 &amp;lsquo;f&amp;rsquo; 或 &amp;lsquo;F&amp;rsquo; 为前缀。这种字符串可包含替换字段，即以 {} 标示的表达式。格式化字符串字面值，会在运行时将表达式求值，而其他字符串字面值总是一个常量。
格式化字符串字面值中的表达式会被当作包含在圆括号中的普通 Python 表达式一样处理，但有少数例外。
空表达式不被允许，lambda 和赋值表达式 :=（python 3.8版添加）必须显式地加上圆括号。
f&amp;#39;{(a := 1+1)}&amp;#39; # python 3.8 才能运行 &#39;2&#39;f&amp;#39;{(lambda x:1)}&amp;#39; &#39;&amp;lt;function &amp;lt;lambda&amp;gt; at 0x000001D70B06CA60&amp;gt;&#39;替换表达式可以包含换行（例如在三重引号字符串中），但是不能包含注释。
a = 3; b = 2 f&amp;#39;&amp;#39;&amp;#39;3+2\ -5= {a + b - 5}&amp;#39;&amp;#39;&amp;#39; &#39;3+2-5=\n0&#39;每个表达式会在格式化字符串字面值所包含的位置按照从左至右的顺序被求值。
f&amp;#39;{1+2 &amp;gt; 3}&amp;#39; &#39;False&#39;可以在表达式后加一个等于号 &amp;lsquo;=&amp;rsquo;（3.8 新版功能），提供了等于号 &amp;lsquo;=&amp;rsquo; 的时候，输出将包含 &amp;lsquo;=&amp;rsquo;、&amp;rsquo;=&amp;rsquo; 前后的空格以及求值结果。默认情况下，&amp;rsquo;=&amp;rsquo; 会导致表达式的 repr() 被使用，除非专门指定了格式。
foo = &amp;#34;bar&amp;#34; f&amp;#34;{ foo = }&amp;#34; &amp;quot; foo = &#39;bar&#39;&amp;quot;可以带一个以叹号 &amp;lsquo;!</description>
    </item>
    <item>
      <title>字符串操作符</title>
      <link>/python/02_string/28_string_operators/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/28_string_operators/</guid>
      <description>操作符 * 操作符 * 可以实现将字符串重复 n（整数）遍相连接：
&amp;#39;Python&amp;#39; * 3 &#39;PythonPythonPython&#39;n 是小于 1 的整数，则得到空字符串：
&amp;#39;Python&amp;#39; * -1 &#39;&#39;* 操作符可以与 = 连用，重复拼接并赋值：
a = &amp;#39;py&amp;#39; a *= 3 a &#39;pypypy&#39;由于字符串是可迭代对象，因此可以使用 * 对字符串进行拆包：
(*&amp;#39;Python&amp;#39;,) (&#39;P&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;)操作符 % 字符串使用 % 操作符，官方文档叫 “printf 风格的字符串格式化”。比较早的格式化方法，官方已不推荐使用，了解它能更好地读懂别人的代码。
转换标记符包含两个或更多字符并具有以下组成，且必须遵循如下规定的顺序：
&amp;lsquo;%&amp;rsquo; 字符，用于标记转换符的起始。 映射键（可选），由加圆括号的字符序列组成。 转换旗标（可选），用于影响某些转换类型的结果。 最小字段宽度（可选）。如果指定为 &amp;lsquo;*&amp;rsquo; (星号)，则实际宽度会从 values 元组的下一元素中读取，要转换的对象则为最小字段宽度和可选的精度之后的元素。 精度（可选），以在 &amp;lsquo;.&amp;rsquo; (点号) 之后加精度值的形式给出。如果指定为 &amp;lsquo;*&amp;rsquo; (星号)，则实际精度会从 values 元组的下一元素中读取，要转换的对象则为精度之后的元素。 长度修饰符（可选）。 转换类型。 &amp;#39;hi %r&amp;#39; % &amp;#39;python&amp;#39; &amp;quot;hi &#39;python&#39;&amp;quot;&amp;#39;%s %r&amp;#39; % (&amp;#39;hi&amp;#39;,&amp;#39;python&amp;#39;) &amp;quot;hi &#39;python&#39;&amp;quot;转换旗标为：</description>
    </item>
    <item>
      <title>str.encode 编码为字节串</title>
      <link>/python/02_string/29_str.encode/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/29_str.encode/</guid>
      <description>字符串方法 str.encode()，Python 官方文档描述如下：
help(str.encode) Help on method_descriptor:encode(self, /, encoding=&#39;utf-8&#39;, errors=&#39;strict&#39;)Encode the string using the codec registered for encoding.encodingThe encoding in which to encode the string.errorsThe error handling scheme to use for encoding errors.The default is &#39;strict&#39; meaning that encoding errors raise aUnicodeEncodeError. Other possible values are &#39;ignore&#39;, &#39;replace&#39; and&#39;xmlcharrefreplace&#39; as well as any other name registered withcodecs.register_error that can handle UnicodeEncodeErrors.</description>
    </item>
    <item>
      <title>str.capitalize 首字符大写</title>
      <link>/python/02_string/30_str.capitalize/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/30_str.capitalize/</guid>
      <description>字符串方法 str.capitalize()，Python 官方文档描述如下：
help(str.capitalize) Help on method_descriptor:capitalize(self, /)Return a capitalized version of the string.More specifically, make the first character have upper case and the rest lowercase.返回原字符串的副本，其首个字符大写，其余为小写:
&amp;#39;pyTHON&amp;#39;.capitalize() &#39;Python&#39;只有首个字符是字母，才会将首个字符大写：
&amp;#39;嗨 pyTHON&amp;#39;.capitalize() &#39;嗨 python&#39;</description>
    </item>
    <item>
      <title>str.casefold 消除大小写</title>
      <link>/python/02_string/31_str.casefold/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/31_str.casefold/</guid>
      <description>字符串方法 str.casefold()，Python 官方文档描述如下：
help(str.casefold) Help on method_descriptor:casefold(self, /)Return a version of the string suitable for caseless comparisons.返回原字符串消除大小写的副本。消除大小写的字符串可用于忽略大小写的匹配。
消除大小写类似于转为小写，但是更加彻底一些，因为它会移除字符串中的所有大小写变化形式。例如，德语小写字母 &amp;lsquo;ß&amp;rsquo; 相当于 &amp;ldquo;ss&amp;rdquo;，由于它已经是小写，lower() 不会对 &amp;lsquo;ß&amp;rsquo; 做任何改变，而 casefold() 则会将其转换为 &amp;ldquo;ss&amp;rdquo;。
&amp;#39;pYthOn&amp;#39;.casefold() &#39;python&#39;&amp;#39;ß&amp;#39;.casefold() &#39;ss&#39;&amp;#39;ß&amp;#39;.lower() &#39;ß&#39;</description>
    </item>
    <item>
      <title>str.lower 转小写</title>
      <link>/python/02_string/32_str.lower/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/32_str.lower/</guid>
      <description>字符串方法 str.lower()，Python 官方文档描述如下：
help(str.lower) Help on method_descriptor:lower(self, /)Return a copy of the string converted to lowercase.返回原字符串的副本，其所有区分大小写的字符均转换为小写。
&amp;#39;PyThon&amp;#39;.lower() &#39;python&#39;&amp;#39;嗨 PyThon&amp;#39;.lower() &#39;嗨 python&#39;&amp;#39;PyThon Γ&amp;#39;.lower() &#39;python γ&#39;</description>
    </item>
    <item>
      <title>str.title 单词首字母大写</title>
      <link>/python/02_string/33_str.title/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/33_str.title/</guid>
      <description>字符串方法 str.title()，Python 官方文档描述如下：
help(str.title) Help on method_descriptor:title(self, /)Return a version of the string where each word is titlecased.More specifically, words start with uppercased characters and all remainingcased characters have lower case.返回原字符串的标题版本，其中每个单词第一个字母为大写，其余字母为小写。
&amp;#39;hi python&amp;#39;.title() &#39;Hi Python&#39;&amp;#39;嗨python&amp;#39;.title() &#39;嗨Python&#39;该算法使用一种简单的与语言无关的定义，将连续的字母组合视为单词。该定义在多数情况下都很有效，但它也意味着代表缩写形式与所有格的撇号也会成为单词边界，这可能导致不希望的结果:
&amp;#34;they&amp;#39;re bill&amp;#39;s friends from the UK&amp;#34;.title() &amp;quot;They&#39;Re Bill&#39;S Friends From The Uk&amp;quot;</description>
    </item>
    <item>
      <title>str.upper 转大写</title>
      <link>/python/02_string/34_str.upper/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/34_str.upper/</guid>
      <description>字符串方法 str.upper()，Python 官方文档描述如下：
help(str.upper) Help on method_descriptor:upper(self, /)Return a copy of the string converted to uppercase.返回原字符串的副本，其中所有区分大小写的字符均转换为大写。
&amp;#39;嗨python&amp;#39;.upper() &#39;嗨PYTHON&#39;&amp;#39;πpython&amp;#39;.upper() &#39;ΠPYTHON&#39;</description>
    </item>
    <item>
      <title>str.swapcase 大小写互转</title>
      <link>/python/02_string/35_str.swapcase/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/35_str.swapcase/</guid>
      <description>字符串方法 str.swapcase()，Python 官方文档描述如下：
help(str.swapcase) Help on method_descriptor:swapcase(self, /)Convert uppercase characters to lowercase and lowercase characters to uppercase.返回原字符串的副本，其中大写字符转换为小写，反之亦然。请注意 s.swapcase().swapcase() == s 并不一定为真值。
&amp;#39;PythoN&amp;#39;.swapcase() &#39;pYTHOn&#39;&amp;#39;pYTHOn&amp;#39;.swapcase() &#39;PythoN&#39;&amp;#39;ß&amp;#39;.swapcase() # 德语的小写字母 ß 相当于 ss &#39;SS&#39;&amp;#39;SS&amp;#39;.swapcase() &#39;ss&#39;&amp;#39;ß&amp;#39;.swapcase().swapcase() == &amp;#39;ß&amp;#39; False</description>
    </item>
    <item>
      <title>str.zfill 填充 0</title>
      <link>/python/02_string/36_str.zfill/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/36_str.zfill/</guid>
      <description>字符串方法 str.zfill()，Python 官方文档描述如下：
help(str.zfill) Help on method_descriptor:zfill(self, width, /)Pad a numeric string with zeros on the left, to fill a field of the given width.The string is never truncated.返回原字符串的副本，在左边填充 ASCII &amp;lsquo;0&amp;rsquo; 数码使其长度变为 width。正负值前缀 (&amp;rsquo;+&amp;rsquo;/&amp;rsquo;-&amp;rsquo;) 的处理方式是在正负符号 之后填充而非在之前。如果 width 小于等于 len(str) 则返回原字符串的副本。
&amp;#34;42a&amp;#34;.zfill(5) &#39;0042a&#39;&amp;#34;-42&amp;#34;.zfill(5) &#39;-0042&#39;&amp;#34;-42&amp;#34;.zfill(1) &#39;-42&#39;</description>
    </item>
    <item>
      <title>str.translate 按表转换</title>
      <link>/python/02_string/37_str.translate/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/37_str.translate/</guid>
      <description>文档描述如下：
help(str.translate) Help on method_descriptor:translate(self, table, /)Replace each character in the string using the given translation table.tableTranslation table, which must be a mapping of Unicode ordinals toUnicode ordinals, strings, or None.The table must implement lookup/indexing via __getitem__, for instance adictionary or list. If this operation raises LookupError, the character isleft untouched. Characters mapped to None are deleted.返回原字符串的副本，其中每个字符按给定的转换表进行映射。转换表必须是一个使用 __getitem__() 来实现索引操作的对象，通常为 mapping 或 sequence。当以 Unicode 码位序号（整数）为索引时，转换表对象可以做以下任何一种操作：返回 Unicode 序号或字符串，将字符映射为一个或多个字符；返回 None，将字符从结果字符串中删除；或引发 LookupError 异常，将字符映射为其自身。</description>
    </item>
    <item>
      <title>str.maketrans 生成转换表</title>
      <link>/python/02_string/38_str.maketrans/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/38_str.maketrans/</guid>
      <description>字符串方法 str.maketrans()，该方法是一个静态方法（没有 self），Python 官方文档描述如下：
help(str.maketrans) Help on built-in function maketrans:maketrans(x, y=None, z=None, /)Return a translation table usable for str.translate().If there is only one argument, it must be a dictionary mapping Unicodeordinals (integers) or characters to Unicode ordinals, strings or None.Character keys will be then converted to ordinals.If there are two arguments, they must be strings of equal length, andin the resulting dictionary, each character in x will be mapped to thecharacter at the same position in y.</description>
    </item>
    <item>
      <title>str.isalnum 是字母或数字？</title>
      <link>/python/02_string/39_str.isalnum/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/39_str.isalnum/</guid>
      <description>字符串方法 str.isalnum()，Python 官方文档描述如下：
help(str.isalnum) Help on method_descriptor:isalnum(self, /)Return True if the string is an alpha-numeric string, False otherwise.A string is alpha-numeric if all characters in the string are alpha-numeric andthere is at least one character in the string.如果字符串中的所有字符都是字母或数字且至少有一个字符，则返回 True ，否则返回 False 。
&amp;#39;&amp;#39;.isalnum() False&amp;#39;python123&amp;#39;.isalnum() True&amp;#39;python 123&amp;#39;.isalnum() False&amp;#39;γ&amp;#39;.isalnum() True</description>
    </item>
    <item>
      <title>str.isalpha 是字母（包括汉字等）？</title>
      <link>/python/02_string/40_str.isalpha/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/40_str.isalpha/</guid>
      <description>字符串方法 str.isalpha()，Python 官方文档描述如下：
help(str.isalpha) Help on method_descriptor:isalpha(self, /)Return True if the string is an alphabetic string, False otherwise.A string is alphabetic if all characters in the string are alphabetic and thereis at least one character in the string.如果字符串中的所有字符都是字母，并且至少有一个字符，返回 True ，否则返回 False 。
字母字符是指那些在 Unicode 字符数据库中定义为 ”Letter” 的字符，即那些具有 ”Lm”、”Lt”、”Lu”、”Ll” 或 ”Lo” 之一的通用类别属性的字符。注意，这与 Unicode 标准中定义的 ”字母” 属性不同。
此处的字母包括汉字等。
&amp;#39;&amp;#39;.isalpha() False&amp;#39;γ&amp;#39;.isalpha() True&amp;#39;嗨你好&amp;#39;.isalpha() True&amp;#39;嗨！你好&amp;#39;.isalpha() False</description>
    </item>
    <item>
      <title>str.isdecimal 是十进制字符？</title>
      <link>/python/02_string/41_str.isdecimal/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/41_str.isdecimal/</guid>
      <description>字符串方法 str.isdecimal()，Python 官方文档描述如下：
help(str.isdecimal) Help on method_descriptor:isdecimal(self, /)Return True if the string is a decimal string, False otherwise.A string is a decimal string if all characters in the string are decimal andthere is at least one character in the string.如果字符串中的所有字符都是十进制字符且该字符串至少有一个字符，则返回 True，否则返回 False。
十进制字符指那些可以用来组成 10 进制数字的字符。严格地讲，十进制字符是 Unicode 通用类别 ”Nd” 中的一个字符。
&amp;#39;&amp;#39;.isdecimal() False&amp;#39;3.14&amp;#39;.isdecimal() False&amp;#39;０1２3&amp;#39;.isdecimal() True&amp;#39;5²&amp;#39;.isdecimal() False&amp;#39;python&amp;#39;.isdecimal() Falseb&amp;#39;100&amp;#39;.isdecimal() ---------------------------------------------------------------------------AttributeError Traceback (most recent call last)&amp;lt;ipython-input-13-52e1682babfd&amp;gt; in &amp;lt;module&amp;gt;----&amp;gt; 1 b&#39;100&#39;.</description>
    </item>
    <item>
      <title>str.isdigit 是数字？</title>
      <link>/python/02_string/42_str.isdigit/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/42_str.isdigit/</guid>
      <description>字符串方法 str.isdigit()，Python 官方文档描述如下：
help(str.isdigit) Help on method_descriptor:isdigit(self, /)Return True if the string is a digit string, False otherwise.A string is a digit string if all characters in the string are digits and thereis at least one character in the string.如果字符串中的所有字符都是数字，并且至少有一个字符，返回 True ，否则返回 False 。
数字包括十进制字符和需要特殊处理的数字，如兼容性上标数字。这包括了不能用来组成 10 进制数的数字，如 Kharosthi 数。严格地讲，数字是指属性值为 Numeric_Type=Digit 或 Numeric_Type=Decimal 的字符。
&amp;#39;一&amp;#39;.isdigit() False&amp;#39;3.14&amp;#39;.isdigit() False&amp;#39;１２３&amp;#39;.isdigit() Trueb&amp;#39;123&amp;#39;.isdigit() True&amp;#39;5²&amp;#39;.isdigit() True</description>
    </item>
    <item>
      <title>str.isnumeric 是数值字符？</title>
      <link>/python/02_string/43_str.isnumeric/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/43_str.isnumeric/</guid>
      <description>字符串方法 str.isnumeric()，Python 官方文档描述如下：
help(str.isnumeric) Help on method_descriptor:isnumeric(self, /)Return True if the string is a numeric string, False otherwise.A string is numeric if all characters in the string are numeric and there is atleast one character in the string.如果字符串中至少有一个字符且所有字符均为数值字符则返回 True，否则返回 False。
数值字符包括数字字符，以及所有在 Unicode 中设置了数值特性属性的字符，例如 U+2155, VUL-GAR FRACTION ONE FIFTH。正式的定义为：数值字符就是具有特征属性值 Numeric_Type=Digit, Numeric_Type=Decimal 或 Numeric_Type=Numeric 的字符。
此处所指数字包括罗马数字，汉字数字等。
&amp;#39;②&amp;#39;.isnumeric() True&amp;#39;3.14&amp;#39;.isnumeric() False&amp;#39;5²&amp;#39;.isnumeric() True&amp;#39;Ⅷ&amp;#39;.isnumeric() True&amp;#39;一&amp;#39;.isnumeric() True&amp;#39;壹&amp;#39;.isnumeric() True</description>
    </item>
    <item>
      <title>str.islower 是小写？</title>
      <link>/python/02_string/44_str.islower/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/44_str.islower/</guid>
      <description>字符串方法 str.islower()，Python 官方文档描述如下：
help(str.islower) Help on method_descriptor:islower(self, /)Return True if the string is a lowercase string, False otherwise.A string is lowercase if all cased characters in the string are lowercase andthere is at least one cased character in the string.如果字符串中至少有一个区分大小写的字符且此类字符均为小写则返回 True，否则返回 False。
&amp;#39;嗨&amp;#39;.islower() False&amp;#39;嗨 Abc&amp;#39;.islower() False&amp;#39;嗨 abc&amp;#39;.islower() True</description>
    </item>
    <item>
      <title>str.isupper 是大写？</title>
      <link>/python/02_string/45_str.isupper/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/45_str.isupper/</guid>
      <description>字符串方法 str.isupper()，Python 官方文档描述如下：
help(str.isupper) Help on method_descriptor:isupper(self, /)Return True if the string is an uppercase string, False otherwise.A string is uppercase if all cased characters in the string are uppercase andthere is at least one cased character in the string.如果字符串中至少有一个区分大小写的字符且此类字符均为大写则返回 True，否则返回 False。
&amp;#39;Γ&amp;#39;.isupper() True&amp;#39;嗨 AB&amp;#39;.isupper() True&amp;#39;嗨 Ab&amp;#39;.isupper() False</description>
    </item>
    <item>
      <title>str.istitle 是标题字符串？</title>
      <link>/python/02_string/46_str.istitle/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/46_str.istitle/</guid>
      <description>字符串方法 str.istitle()，Python 官方文档描述如下：
help(str.istitle) Help on method_descriptor:istitle(self, /)Return True if the string is a title-cased string, False otherwise.In a title-cased string, upper- and title-case characters may onlyfollow uncased characters and lowercase characters only cased ones.如果字符串中至少有一个字符且为标题字符串则返回 True，例如大写字符之后只能带非大写字符而小写字符必须有大写字符打头。否则返回 False。
&amp;#39;Abc Py&amp;#39;.istitle() True&amp;#39;嗨 A11&amp;#39;.istitle() True&amp;#39;嗨 Abc&amp;#39;.istitle() True&amp;#39;嗨 ABC&amp;#39;.istitle() False</description>
    </item>
    <item>
      <title>str.isascii 是 ASCII 字符？</title>
      <link>/python/02_string/47_str.isascii/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/47_str.isascii/</guid>
      <description>字符串方法 str.isascii()，Python 官方文档描述如下：
help(str.isascii) Help on method_descriptor:isascii(self, /)Return True if all characters in the string are ASCII, False otherwise.ASCII characters have code points in the range U+0000-U+007F.Empty string is ASCII too.如果字符串为空或字符串中的所有字符都是 ASCII ，返回 True，否则返回 False。ASCII 字符的码点范围是 U+0000-U+007F。
&amp;#39;&amp;#39;.isascii() True&amp;#39;python&amp;#39;.isascii() True&amp;#39;python.3&amp;#39;.isascii() True&amp;#39;嗨 python&amp;#39;.isascii() False</description>
    </item>
    <item>
      <title>str.isidentifier 是有效标识符？</title>
      <link>/python/02_string/48_str.isidentifier/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/48_str.isidentifier/</guid>
      <description>字符串方法 str.isidentifier()，Python 官方文档描述如下：
help(str.isidentifier) Help on method_descriptor:isidentifier(self, /)Return True if the string is a valid Python identifier, False otherwise.Call keyword.iskeyword(s) to test whether string s is a reserved identifier,such as &amp;quot;def&amp;quot; or &amp;quot;class&amp;quot;.如果字符串是有效的标识符，返回 True，否则返回 False。
&amp;#39;&amp;#39;.isidentifier() False&amp;#39;1mycode&amp;#39;.isidentifier() False&amp;#39;_mycode&amp;#39;.isidentifier() True&amp;#39;123&amp;#39;.isidentifier() False&amp;#39;_123&amp;#39;.isidentifier() True&amp;#39;变量名&amp;#39;.isidentifier() True&amp;#39;for&amp;#39;.isidentifier() True</description>
    </item>
    <item>
      <title>str.isprintable 是可打印字符？</title>
      <link>/python/02_string/49_str.isprintable/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/49_str.isprintable/</guid>
      <description>字符串方法 str.isprintable()，Python 官方文档描述如下：
help(str.isprintable) Help on method_descriptor:isprintable(self, /)Return True if the string is printable, False otherwise.A string is printable if all of its characters are considered printable inrepr() or if it is empty.如果字符串中所有字符均为可打印字符或字符串为空则返回 True，否则返回 False。
不可打印字符是在 Unicode 字符数据库中被定义为 ”Other” 或 ”Separator” 的字符，例外情况是 ASCII 空格字符 (0x20) 被视作可打印字符。
请注意在此语境下可打印字符是指当对一个字符串发起调用 repr() 时不必被转义的字符。它们与字符串写入 sys.stdout 或 sys.stderr 时所需的处理无关。
&amp;#39;&amp;#39;.isprintable() True&amp;#39; &amp;#39;.isprintable() True&amp;#39;\n&amp;#39;.isprintable() False&amp;#39;\python&amp;#39;.isprintable() True&amp;#39;py\thon&amp;#39;.isprintable() False</description>
    </item>
    <item>
      <title>str.isspace 是空白字符？</title>
      <link>/python/02_string/50_str.isspace/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/50_str.isspace/</guid>
      <description>字符串方法 str.isspace()，Python 官方文档描述如下：
help(str.isspace) Help on method_descriptor:isspace(self, /)Return True if the string is a whitespace string, False otherwise.A string is whitespace if all characters in the string are whitespace and thereis at least one character in the string.如果字符串中只有空白字符且至少有一个字符则返回 True，否则返回 False。
&amp;#39;&amp;#39;.isspace() False&amp;#39; &amp;#39;.isspace() True&amp;#39;\n\t\r\f&amp;#39;.isspace() True&amp;#39; \\&amp;#39;.isspace() False</description>
    </item>
    <item>
      <title>str.removeprefix  移除前缀</title>
      <link>/python/02_string/51_str.removeprefix/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/51_str.removeprefix/</guid>
      <description>字符串方法 str.removeprefix()。
3.9 版本新功能。
str.removeprefix(prefix, /)，如果字符串以 前缀字符串 prefix 开头，返回 string[len(prefix):]，否则，返回原始字符串的副本。
&amp;#39;TestHook&amp;#39;.removeprefix(&amp;#39;Test&amp;#39;) &#39;Hook&#39;&amp;#39;BaseTestCase&amp;#39;.removeprefix(&amp;#39;Test&amp;#39;) &#39;BaseTestCase&#39;</description>
    </item>
    <item>
      <title>str.removesuffix 移除后缀</title>
      <link>/python/02_string/52_str.removesuffix/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/02_string/52_str.removesuffix/</guid>
      <description>字符串方法 str.removesuffix()。
3.9 版本新功能。
str.removesuffix(suffix, /)，如果字符串以 后缀字符串 suffix 结尾，并且后缀非空，返回 string[:-len(suffix)]，否则，返回原始字符串的副本。
&amp;#39;MiscTests&amp;#39;.removesuffix(&amp;#39;Tests&amp;#39;) &#39;Misc&#39;&amp;#39;TmpDirMixin&amp;#39;.removesuffix(&amp;#39;Tests&amp;#39;) &#39;TmpDirMixin&#39;</description>
    </item>
  </channel>
</rss>