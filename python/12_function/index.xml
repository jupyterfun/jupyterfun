<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>函数概述 on jupyter.fun</title>
    <link>/python/12_function/</link>
    <description>Recent content in 函数概述 on jupyter.fun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-ch</language>
    <lastBuildDate>Sun, 07 Aug 2022 16:07:59 +0800</lastBuildDate><atom:link href="/python/12_function/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>函数定义</title>
      <link>/python/12_function/02_function_definition/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/12_function/02_function_definition/</guid>
      <description>函数定义有两种方式，def 语句定义有名字的函数（详见 def 定义函数），lambda 表达式定义匿名函数（详见 lambda 函数）。
定义一个函数，即是创建了一个函数可执行代码的包装器，他将函数想要实现的功能包装起来。然后通过调用它来实现其功能。def 语句 详细介绍了定义函数的语法规则，下面看看如何将一个功能包装起来。
例如下列函数，实现了将列表中的 字符串整数 以及 整数 相加求和的功能，以后只要遇到这种情况，都可以用它来求和：
sumpro([1,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;]) 6# def 定义 def sumpro(lst): return sum(int(i) for i in lst) sumpro([&amp;#39;1 &amp;#39;,&amp;#39; 2&amp;#39;,3]) 6# lambda 表达式定义 lambda lst: sum(int(i) for i in lst) &amp;lt;function __main__.&amp;lt;lambda&amp;gt;(lst)&amp;gt;lst = [[&amp;#39;2&amp;#39;,&amp;#39;8&amp;#39;],[&amp;#39;3&amp;#39;,&amp;#39;4&amp;#39;]] sorted(lst,key=lambda lst: sum(int(i) for i in lst)) [[&#39;3&#39;, &#39;4&#39;], [&#39;2&#39;, &#39;8&#39;]]函数定义，也可以定义为实现功能，但没有返回值（默认返回 None）的过程。
例如下列函数，实现了将列表中的字符串整数都转换为整数：
def convert_to_numb(lst): for i in range(len(lst)): if type(lst[i]) != int: lst[i] = int(lst[i]) lst = [&amp;#39;1&amp;#39;,2,&amp;#39;3&amp;#39;] n = convert_to_numb(lst) lst, n is None ([1, 2, 3], True)函数定义所使用的函数名称，不能与当前作用域中以定义的名称相同，这会屏蔽掉已存在的名称，或将自定义的函数对象重新赋值给了该名称。</description>
    </item>
    <item>
      <title>函数形参</title>
      <link>/python/12_function/03_formal_parameter/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/12_function/03_formal_parameter/</guid>
      <description>形参是函数定义中指定的参数名称。指定某个参数的形式，决定了该形参在函数调用时，可以接受实参的方式。关于实参详见 函数调用。
因而形参分为五种：
位置或关键字：指定一个可以作为 位置参数 传入也可以作为 关键字参数 传入的实参。这是默认的形参类型，但有默认值的形参必须置于无默认值的形参之后。 def f(a,b=None): print(f&amp;#39;a={a},b={b}&amp;#39;) # 位置实参传入 f(1,2) # 关键字实参传入 f(b=2,a=1) a=1,b=2a=1,b=2仅限位置：指定一个只能通过位置传入的参数。仅限位置形参通过在函数定义的形参之后包含一个 / 字符来定义。/ 之前的参数为仅限位置形参，之后的形参为默认形参类型。有默认值的形参也必须置于无默认值的形参之后。 def f(a,b=None,/,c=None): # 因为 b 有默认值，c 必须要有默认值 print(f&amp;#39;a={a},b={b},c={c}&amp;#39;) # 按位置传参调用 f(1,2,c=3) # 关键字传参则不允许 f(a=1,b=2) a=1,b=2,c=3---------------------------------------------------------------------------TypeError Traceback (most recent call last)&amp;lt;ipython-input-6-52b3afdaad4c&amp;gt; in &amp;lt;module&amp;gt;4 f(1,2,c=3)5 # 关键字传参则不允许----&amp;gt; 6 f(a=1,b=2)TypeError: f() got some positional-only arguments passed as keyword arguments: &#39;a, b&#39;仅限关键字：指定一个只能通过关键字传入的参数。仅限关键字形参可通过在函数定义的形参中包含单个 可变位置形参 或者在形参之前放一个 * 来定义。可变位置形参 或 * 之后的参数为仅限关键字形参。 def f(*a,b=None,c=None): # b 和 c 必须有默认值 print(f&amp;#39;a={a},b={b},c={c}&amp;#39;) # 位置传参将被解读为可变位置参数 f(1,2,3) # 关键字传参 f(1,b=2,c=3) a=(1, 2, 3),b=None,c=Nonea=(1,),b=2,c=3def f(*,a,b=None,c): print(f&amp;#39;a={a},b={b},c={c}&amp;#39;) # 关键字传参 f(b=2,a=1,c=3) # 位置传参不允许 f(1,2,3) a=1,b=2,c=3---------------------------------------------------------------------------TypeError Traceback (most recent call last)&amp;lt;ipython-input-1-9d584fa28622&amp;gt; in &amp;lt;module&amp;gt;4 f(b=2,a=1,c=3)5 # 位置传参不允许----&amp;gt; 6 f(1,2,3)TypeError: f() takes 0 positional arguments but 3 were given可变位置：指定一个可以接受任意数量的位置参数传入的参数。这种形参可通过在形参名称前加缀 * 来定义，并将接受到的参数封装成一个元组。该参数如果接受到了实参，它前面的参数必须为仅限位置参数。 def f(a,b=None,*c): print(f&amp;#39;a={a},b={b},c={c}&amp;#39;) # c 没有接受参数 f(1); f(b=2,a=1) # c 接受到了参数 f(1,2,3,4,5) a=1,b=None,c=()a=1,b=2,c=()a=1,b=2,c=(3, 4, 5)可变关键字：指定一个可以接受任意数量的关键字参数的参数。这种形参可通过在形参名称前加缀 ** 来定义，并将接受到的参数封装成一个字典。 def f(a,b=None,**c): print(f&amp;#39;a={a},b={b},c={c}&amp;#39;) f(1,2,c=3,d=4) f(d=4,b=2,a=1,c=3) a=1,b=2,c={&#39;c&#39;: 3, &#39;d&#39;: 4}a=1,b=2,c={&#39;d&#39;: 4, &#39;c&#39;: 3}带默认值的参数，可变位置参数和可变关键字参数，调用函数时可以不传参。</description>
    </item>
    <item>
      <title>函数返回值</title>
      <link>/python/12_function/04_return_value/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/12_function/04_return_value/</guid>
      <description>函数返回值通过 return 语句 来实现，调用函数时，返回 return 语句之后表达式的值，没有 return 语句或 return 语句之后为空的函数，调用函数默认返回 None。
def f(x): return x**2 f(2) 4def f(): pass f() is None True函数执行到 return 语句，则结束当前函数的调用，可以通过条件判断，返回特定结果：
def f(x=None): if x == None: return 0 # 使用默认值调用函数，接下来的代码将不被执行 print(f&amp;#39;x={x}&amp;#39;) if x != None: return f&amp;#39;x²={x**2}&amp;#39; f() 0f(2) x=2&#39;x²=4&#39;return 之后的表达式可以是多个表达式用逗号隔开（其实是一个元组），可用赋值语句分别接收返回值：
def f(x): return sum(x), max(x), min(x) f([1,2,3,4]) (10, 4, 1)sum_x, max_x, min_x = f([1,2,3,4]) sum_x, max_x, min_x (10, 4, 1)返回值可以是任何值。如果 return 之后的表达式中包含函数自身的调用，则该函数称为递归函数。详见 递归函数。</description>
    </item>
    <item>
      <title>递归函数</title>
      <link>/python/12_function/05_recursion/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/12_function/05_recursion/</guid>
      <description>函数 return 语句的表达式中包含函数自身的调用，则称该函数为递归函数。
递归函数必须设定退出条件，并且调用过程能够逐步达到退出条件，否则将引发 RecursionError。
例如定义一个计算阶乘的函数：
上述函数的退出条件是 x == 0，并且 return 语句中函数调用的参数是 x-1，第一层调用函数的参数 x 为 5，return 语句进入第二层调用，就变成了 x-1 为 4，依此类推，最终以 0 调用函数，达到了退出条件，但是值还没有最终返回，以退出条件下的返回值层层向上返回，最终得到结果。详情查看 递归函数。
def f(x): if x == 0: return 1 else: return f(x-1)*x f(5) 120</description>
    </item>
    <item>
      <title>函数文档</title>
      <link>/python/12_function/06_doc/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/12_function/06_doc/</guid>
      <description>关键字 def 引入一个函数定义。构成函数体的语句从下一行开始，并且必须缩进。
函数体的第一个语句可以是字符串文字（可选的），这个字符串文字即是函数的文档字符串。有些工具使用文档字符串自动生成在线或印刷文档，或者让用户以交互式的形式浏览代码。在你编写的代码中包含文档字符串是一种很好的做法，所以要养成习惯。
文档字符串的内容和格式的约定：
第一行应该是函数目的的简要概述。为简洁起见，它不应显式声明对象的名称或类型，因为这些可通过其他方式获得（除非名称恰好是描述函数操作的动词）。这一行应以大写字母开头，以句点结尾。
如果文档字符串中有更多行，则第二行应为空白，从而在视觉上将摘要与其余描述分开。后面几行应该是一个或多个段落，描述对象的调用约定，它的副作用等。
可以使用函数的 __doc__ 属性或 help() 函数查看函数文档。
help(my_function) Help on function my_function in module __main__:my_function()Do nothing, but document it.def my_function(): &amp;#39;Do nothing, but document it.&amp;#39; pass my_function.__doc__ &#39;Do nothing, but document it.&#39;# 多行的函数文档 def my_func(): &amp;#34;&amp;#34;&amp;#34;Do nothing, but document it. No, really, it doesn&amp;#39;t do anything. &amp;#34;&amp;#34;&amp;#34; pass print(my_func.__doc__) Do nothing, but document it.No, really, it doesn&#39;t do anything.help(my_func) Help on function my_func in module __main__:my_func()Do nothing, but document it.</description>
    </item>
    <item>
      <title>函数调用</title>
      <link>/python/12_function/07_function_call/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/12_function/07_function_call/</guid>
      <description>函数名之后带一个圆括号，圆括号内，根据形参的类型（详见函数形参），给函数传递相应的实参，即可调用函数，执行函数体中的代码。
函数调用传递的实参分为：位置参数和关键字参数。
位置参数: 调用函数时，不带标识符（例如 name=）直接按形参位置传递给函数的参数。位置参数可使用 * 将可迭代对象的元素拆包传入函数，但元素个数不能多于可接收位置参数的形参个数，除非有接收多个位置参数的可变位置形参。 def f(a,b=None,*c,d=None): print(f&amp;#39;a={a},b={b},c={c},d={d}&amp;#39;) f(*[1,2,3,4,5]) # d 只能接收关键字参数 a=1,b=2,c=(3, 4, 5),d=Nonedef f(a,b=None,*,c=None): print(f&amp;#39;a={a},b={b},c={c}&amp;#39;) f(1,2) f(1,2,3) # c 只能接收关键字参数 a=1,b=2,c=None---------------------------------------------------------------------------TypeError Traceback (most recent call last)&amp;lt;ipython-input-2-9cc318bcfef7&amp;gt; in &amp;lt;module&amp;gt;2 print(f&#39;a={a},b={b},c={c}&#39;)3 f(1,2)----&amp;gt; 4 f(1,2,3)TypeError: f() takes from 1 to 2 positional arguments but 3 were given关键字参数: 函数调用中前面带有标识符（例如 name=）传递给函数的参数。关键字参数可以使用 ** 将字典里的元素传入函数，但元素个数不能多于可接收关键字参数的形参个数。关键字参数的标识符或字典的键，必须与可接收关键字参数的形参的名称相同，除非有可接收任意关键字参数的可变关键字形参。 def f(a,/,b=None,*,c=None): print(f&amp;#39;a={a},b={b},c={c}&amp;#39;) f(1,c=3,b=2) # a 仅限位置传参 f(a=1,c=3,b=2) a=1,b=2,c=3---------------------------------------------------------------------------TypeError Traceback (most recent call last)&amp;lt;ipython-input-7-3c39aaeac558&amp;gt; in &amp;lt;module&amp;gt;3 4 f(1,c=3,b=2) # a 仅限位置传参----&amp;gt; 5 f(a=1,c=3,b=2)TypeError: f() got some positional-only arguments passed as keyword arguments: &#39;a&#39;def f(a,/,b=None,**c): print(f&amp;#39;a={a},b={b},c={c}&amp;#39;) # a 仅限位置，b 没有对应的名称，因此全部传给 c f(1,**{&amp;#39;a&amp;#39;:1,&amp;#39;d&amp;#39;:4,&amp;#39;c&amp;#39;:3}) a=1,b=None,c={&#39;a&#39;: 1, &#39;d&#39;: 4, &#39;c&#39;: 3}位置参数必须在关键字参数前面：</description>
    </item>
    <item>
      <title>lambda 函数</title>
      <link>/python/12_function/08_lambda/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/12_function/08_lambda/</guid>
      <description>lambda 函数由 lambda 表达式创建，表达式的语法为：
lambda parameters: expression 形参 parameters 是可选的，表达式 expression 会在函数调用时被求值并作为返回值返回。
表达式必须显示地确定为一个表达式，而不能像 return 语句那样返回多个表达式（默认为一个元组）。
lambda 表达式会创建一个没有名字的函数，函数不能包含语句或标注，可以像调用函数一样直接调用它。
(lambda x,y: x**y)(2,3) 8lambda x,y: x**y &amp;lt;function __main__.&amp;lt;lambda&amp;gt;(x, y)&amp;gt;# 返回值必须显示地确定为一个表达式 f = lambda x: sum(x),max(x),min(x) f([2,3,4]) ---------------------------------------------------------------------------NameError Traceback (most recent call last)&amp;lt;ipython-input-5-1652333b2bc4&amp;gt; in &amp;lt;module&amp;gt;1 # 必须显示地确定为一个表达式----&amp;gt; 2 f = lambda x: sum(x),max(x),min(x)3 f([2,3,4])NameError: name &#39;x&#39; is not definedf = lambda x: (sum(x),max(x),min(x)) f([2,3,4]) (9, 4, 2)lambda 函数通常在以函数作为参数的高阶函数中使用，没有名称，用完即弃。</description>
    </item>
    <item>
      <title>生成器函数</title>
      <link>/python/12_function/09_generator/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/12_function/09_generator/</guid>
      <description>函数定义中使用了 yield 语句，该定义创建的函数是生成器函数。生成器函数通常也直接叫生成器。
当一个生成器函数被调用的时候，它返回一个迭代器，也称为生成器（全称是生成器迭代器，下面所说生成器均指生成器迭代器）。然后通过这个生成器来控制生成器函数的执行。
生成器是一个迭代器，也是一个可迭代对象。但一个生成器生成的 “元素” 只能被使用一次，原因如下：
迭代生成器的时候，生成器函数开始执行，执行到 yield，然后执行被挂起，给生成器的调用者返回 yield 之后的表达式的值。挂起后，所有局部状态都被保留下来，包括局部变量的当前绑定，指令指针，内部求值栈和任何异常处理的状态。
继续迭代生成器，生成器函数从挂起状态继续执行，执行到 yield，然后执行又被挂起，给生成器的调用者返回 yield 之后的表达式的值。
生成器迭代完成时，引发 StopIteration。
在一个生成器函数中，return 语句表示生成器已完成并将导致 StopIteration 被引发。返回值（如果有的话）会被当作一个参数用来构建 StopIteration 并成为 StopIteration.value 属性。
next(g) 0def f(n): yield n g = f(0) print(f) print(g) &amp;lt;function f at 0x000002480120ACA0&amp;gt;&amp;lt;generator object f at 0x000002480122E040&amp;gt;next(g) # 迭代结束 ---------------------------------------------------------------------------StopIteration Traceback (most recent call last)&amp;lt;ipython-input-3-c91425ed1388&amp;gt; in &amp;lt;module&amp;gt;----&amp;gt; 1 next(g) # 迭代结束StopIteration: def f(n): yield n n += 1 yield n n += 1 yield n # 生成器已完成，后面的不被执行 return &amp;#39;end&amp;#39; n += 1 yield n g = f(0) while True: try: print(next(g)) except StopIteration as s: print(s.</description>
    </item>
  </channel>
</rss>