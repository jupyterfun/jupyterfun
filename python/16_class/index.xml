<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面向对象概述 on jupyter.fun</title>
    <link>/python/16_class/</link>
    <description>Recent content in 面向对象概述 on jupyter.fun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-ch</language>
    <lastBuildDate>Sun, 07 Aug 2022 16:07:59 +0800</lastBuildDate><atom:link href="/python/16_class/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>类定义</title>
      <link>/python/16_class/02_class_definition/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/16_class/02_class_definition/</guid>
      <description>类是用来创建用户定义对象的模板，是抽象的对象（类对象）。例如我们说鱼类，指的就是一类抽象的对象，而具体到武昌鱼，鲈鱼，鲫鱼…… 就是具体的对象。
定义了一个类，就可以用这个模块来创建它的具体对象（实例）。类定义的详细语法规则见 class 定义类。
创建一个类，需要继承另一个类。新创建的类是子类，继承的类是基类。如不指定，创建类默认继承自所有类的基类 object。
下面是一个没有任何自定义属性的简单类：
class A: pass A __main__.Atype(A) typeA.__bases__ # 查看基类 (object,)继承一个指定的类，可以对它进行定制化开发。需要注意参数 self, 它是约定名称（可自定义但不推荐），它就代表类创建的实例对象自身。
例如创建一个自定义的列表类，增加 add() 方法：
class Mylist(list): def add(self,value): self.append(value) lst = Mylist(&amp;#39;123&amp;#39;) # 创建实例赋值给 lst lst.add(4) # lst 调用 add 方法，self 参数就是 lst lst [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, 4]或者自定义一个字典，当访问的键不存在时，不报错，而是返回 None（__missing__() 是用来定义字典子类时找不到键如何处理的魔法方法）：
class Mydict(dict): def __missing__(self, key): return d = Mydict(a=1,b=2) d, d[&amp;#39;c&amp;#39;] ({&#39;a&#39;: 1, &#39;b&#39;: 2}, None)我们也可以自定义任意的类，其中 __init__() 方法是创建实例时用来初始化实例对象的魔法方法，可以用它来增加一些自定义属性。没有该方法，创建实例时，将自动调用基类的该方法完成初始化。</description>
    </item>
    <item>
      <title>实例</title>
      <link>/python/16_class/03_instance/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/16_class/03_instance/</guid>
      <description>实例是调用类对象创建的具体对象。例如调用内置类型 int，创建的所有整数，都是 int 类的实例。可通过内置函数 isinstance() 进行实例检查。
int(&amp;#39;1&amp;#39;) 1isinstance(1,int) TruePython 中所有的实例对象，都是 object 的实例。所有的类都是 object 的子类，也被视为 object 的实例；所有的类也被视为默认的元类（创建类的类）type 的实例。
如果一个实例对象应该视为某个类的实例，可以通过魔法方法 __instancecheck__() 来重载 isinstance() 函数，自定义实例检查行为。
isinstance(1,object), isinstance([],object) (True, True)isinstance(int,object) Trueisinstance(int,type) True下面定义一个 “人” 类，来对实例进行说明：
class Person: &amp;#39;这是人类&amp;#39; # 定义人的属性 def __init__(self, name): self.name = name self.ears = &amp;#39;耳朵&amp;#39; self.brain = &amp;#39;大脑&amp;#39; self.hands = &amp;#39;双手&amp;#39; # 人有生活 def live(self): print(f&amp;#39;{self.name}用{self.ears}&amp;#39; &amp;#39;听着音乐，&amp;#39; &amp;#39;享受美好生活。&amp;#39;) # 还有工作 def work(self): print(f&amp;#39;{self.name}用{self.brain}和&amp;#39; f&amp;#39;{self.hands}&amp;#39; &amp;#39;勤劳致富。&amp;#39;) # 造人 xm = Person(&amp;#39;小明&amp;#39;) xz = Person(&amp;#39;小张&amp;#39;) 上述 “人” 类对象 Person 是类对象，调用类对象创建的 xm 和 xz，是两个具体的 “人”，是实例对象。</description>
    </item>
    <item>
      <title>对象</title>
      <link>/python/16_class/04_object/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/16_class/04_object/</guid>
      <description>对象是 Python 中对数据的抽象。Python 程序中的所有数据都是由对象或对象间关系来表示的。
例如计算 x + y 就有对象 x 和 y，+ 其实是调用了 __add__ 方法对象。
[1,2] + [3,4] [1, 2, 3, 4]list.__add__ &amp;lt;slot wrapper &#39;__add__&#39; of &#39;list&#39; objects&amp;gt;[1,2].__add__([3,4]) [1, 2, 3, 4]每个对象都有各自的编号、类型和值。一个对象被创建后，它的编号就绝不会改变，可以将其理解为该对象在内存中的地址。
id([1,2]), type([1,2]) # 实例对象 [1,2] 的编号 和 类型 (2229938322504, list)id(list), type(list) # 类对象 list 的编号 和 类型 (140736641645872, type)对象的值在 Python 中是一个相当抽象的概念：
对象的值并没有一个规范的访问方法； 对象的值并不要求具有特定的构建方式，例如由其全部数据属性组成等； 比较运算符实现了一个特定的对象的值概念，可以认为正是通过实现对象比较，间接地定义了对象的值。 # 列表对象 [1,2] 和类对象 list # 是两个不同对象，值是不相等的 [1,2] == list False具有固定值的对象为不可变对象，例如数字，字符串，元组（包含的对象集不可变），相等的两个值，可能会也可能不会指向同一个对象，看具体实现。</description>
    </item>
    <item>
      <title>名称</title>
      <link>/python/16_class/05_name/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/16_class/05_name/</guid>
      <description>名称（标识符）用于指代对象。当名称被绑定到一个对象时，对该名称求值将返回相应对象。当名称未被绑定时，尝试对其求值将引发 NameError 异常。Python 的保留字或称关键字是特殊的名称，不可被用作普通名称，例如不可用做变量名，函数名，模块名。
# 将 1 绑定名称 a a = 1 a 1# 将自定义类对象绑定到名称 A class A: pass A __main__.A# 将模块 random 绑定到名称 r import random as r r &amp;lt;module &#39;random&#39; from &#39;F:\\anaconda\\lib\\random.py&#39;&amp;gt;# 迭代的每一项循环绑定到名称 i for i in &amp;#39;xue&amp;#39;: display(i) i &#39;x&#39;&#39;u&#39;&#39;e&#39;&#39;e&#39;# 未绑定的名称 m m ---------------------------------------------------------------------------NameError Traceback (most recent call last)&amp;lt;ipython-input-4-2469ef96c490&amp;gt; in &amp;lt;module&amp;gt;1 # 未绑定的名称 m----&amp;gt; 2 mNameError: name &#39;m&#39; is not definedhelp(&amp;#39;keywords&amp;#39;) # 保留字 Here is a list of the Python keywords.</description>
    </item>
    <item>
      <title>变量</title>
      <link>/python/16_class/06_variable/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/16_class/06_variable/</guid>
      <description>Python 中绑定对象的名称即为变量。
人们称呼模块、类、函数和方法对象的名称时，习惯直接指代对象本身，而不是把它们当作变量，例如 random，int，print 等，当将它们绑定到另外的名称时，才称新名称为变量（或化名）。
# 函数名称 f 绑定自定义函数对象 def f(x, func): print(func(x)) a = &amp;#39;1231&amp;#39; # 变量 a b = [int,list,set] # 变量 b c = f # 名称 f 起别名 c for i in b: # 变量 b 中的项循环赋值给变量 i c(a,i) 1231[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;1&#39;]{&#39;3&#39;, &#39;1&#39;, &#39;2&#39;}如果名称绑定在一个代码块中，则为该代码块的局部变量，除非声明为 nonlocal 或 global。
如果名称绑定在模块层级，则为全局变量。(模块代码块的变量既为局部变量又为全局变量。)
如果变量在一个代码块中被使用但不是在其中定义，则为自由变量。
# 第一个代码块中全局变量 n n = 100 # 第二个代码块 # random 模块中的全局变量 randint， # 在此为局部变量，引用后赋值给全局变量 r import random r = random.</description>
    </item>
    <item>
      <title>属性</title>
      <link>/python/16_class/07_attribute/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/16_class/07_attribute/</guid>
      <description>属性指关联到一个对象的值，可以使用点号表达式通过其名称来引用。
可以使用 dir() 函数查看任意对象的属性。
如果属性是可调用对象（例如类，函数，方法等），引用之后可直接调用，也可先赋值给变量再调用。
# 查看 list 对象的属性 dir(list) [&#39;__add__&#39;,&#39;__class__&#39;,&#39;__contains__&#39;,&#39;__delattr__&#39;,&#39;__delitem__&#39;,&#39;__dir__&#39;,&#39;__doc__&#39;,&#39;__eq__&#39;,&#39;__format__&#39;,&#39;__ge__&#39;,&#39;__getattribute__&#39;,&#39;__getitem__&#39;,&#39;__gt__&#39;,&#39;__hash__&#39;,&#39;__iadd__&#39;,&#39;__imul__&#39;,&#39;__init__&#39;,&#39;__init_subclass__&#39;,&#39;__iter__&#39;,&#39;__le__&#39;,&#39;__len__&#39;,&#39;__lt__&#39;,&#39;__mul__&#39;,&#39;__ne__&#39;,&#39;__new__&#39;,&#39;__reduce__&#39;,&#39;__reduce_ex__&#39;,&#39;__repr__&#39;,&#39;__reversed__&#39;,&#39;__rmul__&#39;,&#39;__setattr__&#39;,&#39;__setitem__&#39;,&#39;__sizeof__&#39;,&#39;__str__&#39;,&#39;__subclasshook__&#39;,&#39;append&#39;,&#39;clear&#39;,&#39;copy&#39;,&#39;count&#39;,&#39;extend&#39;,&#39;index&#39;,&#39;insert&#39;,&#39;pop&#39;,&#39;remove&#39;,&#39;reverse&#39;,&#39;sort&#39;]# 通过名称 __add__ 引用属性 list.__add__ &amp;lt;slot wrapper &#39;__add__&#39; of &#39;list&#39; objects&amp;gt;# 直接调用属性 list.__add__([1,2],[3,4]) [1, 2, 3, 4]# 赋值给变量再调用 la = list.</description>
    </item>
    <item>
      <title>方法</title>
      <link>/python/16_class/08_method/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/16_class/08_method/</guid>
      <description>方法指在类内部定义的函数。但并不严格要求一定要在类内部定义。
def f(self): pass class A: f = f A().f &amp;lt;bound method f of &amp;lt;__main__.A object at 0x00000290DC56E198&amp;gt;&amp;gt;下列方法看起来是模块中的函数，其实是模块中，类实例方法重新赋值的名称：
from random import randint type(randint) methodimport random # randint 完整路径 random.Random.randint # 例如重新赋值后即可直接调用 r = random.Random() randint = r.randint randint(0,3) 2普通方法（第一个参数通常命名为 self）如果作为该类的实例的一个属性来调用，方法将会获取实例对象作为其第一个参数。
# list 类的方法 append help(&amp;#39;list.append&amp;#39;) Help on method_descriptor in list:list.append = append(self, object, /)Append object to the end of the list.# list 的实例 [] 调用， # 方法将会获取实例对象 [] 作为其第一个参数 a = [] a.</description>
    </item>
    <item>
      <title>命名空间</title>
      <link>/python/16_class/09_namespace/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/16_class/09_namespace/</guid>
      <description>命名空间是存放变量的场所。命名空间有局部、全局和内置的，还有对象中的嵌套命名空间。不同命名空间中的变量没有关系。
命名空间通过防止命名冲突来支持模块化。例如，函数 builtins.open 与 os.open 可通过各自的命名空间来区分。
# 函数的局部命名空间，在函数调用时创建 def f(): x = &amp;#39;函数 f 命名空间中的变量 x&amp;#39; print(x) # 全局命名空间 x = &amp;#39;全局命名空间中的变量 x&amp;#39; # 调用函数 f，与全局命名空间中的 x 无关 f() 函数 f 命名空间中的变量 x# 模块 random 导入创建它自己的局部命名空间 import random # 定义一个全局变量 randint def randint(): print(&amp;#39;全局 randint&amp;#39;) # random 局部命名空间中的 randint # 与全局变量 randint 无关 randint() random.randint(0,3) 全局 randint1# 上述定义的变量 f, x, randint，导入的变量 random， # 都存放在了当前全局命名空间中 f, x, random, randint (&amp;lt;function __main__.</description>
    </item>
    <item>
      <title>作用域</title>
      <link>/python/16_class/10_scope/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/16_class/10_scope/</guid>
      <description>作用域定义了一个代码块中名称的可见性。如果代码块中定义了一个局部变量，则其作用域包含该代码块。如果定义发生于函数代码块中，则其作用域会扩展到该函数所包含的任何代码块，除非有某个被包含代码块引入了对该名称的不同绑定。
当一个名称在代码块中被使用时，会由包含它的最近作用域来解析。对一个代码块可见的所有这种作用域的集合称为该代码块的环境。
一个作用域是一个 命名空间 可直接访问的 Python 程序的文本区域。这里的 “可直接访问” 意味着对名称的非限定引用（限定引用指点号表达式例如 math.pi）会尝试在命名空间中查找名称。
# 全局变量作用域为当前模块 a = &amp;#39;全局变量&amp;#39; def f(): # print 内置名称作用域包含全局 print(f&amp;#39;print 函数的命名空间可以访问：{a}&amp;#39;) return f&amp;#39;f 的命名空间可以访问：{a}&amp;#39; print(a) print(f()) 全局变量print 函数的命名空间可以访问：全局变量f 的命名空间可以访问：全局变量# 全局变量作用域为当前模块 # 但被包含命名空间引入了同名的局部变量 a = &amp;#39;全局变量&amp;#39; def f(): # f 中定义的局部变量 # 作用域为函数内部 a = &amp;#39;局部变量&amp;#39; print(f&amp;#39;print 函数的命名空间可以访问：{a}&amp;#39;) return f&amp;#39;f 的命名空间可以访问：{a}&amp;#39; print(a) print(f()) 全局变量print 函数的命名空间可以访问：局部变量f 的命名空间可以访问：局部变量虽然作用域是静态地确定的，但它们会被动态地使用。嵌套作用域的搜索顺序:
最先搜索最内部作用域包含的局部名称 从最近的封闭作用域开始搜索作用域包含的名称 倒数第二个作用域包含当前模块的全局名称 最外面的作用域（最后搜索）是包含内置名称的命名空间 # 搜索最内部作用域名称 str # 屏蔽上层作用域 def f(): str = 0 def f1(): str = 1 return str return f1() f(), str (1, str)# 搜索最近封闭作用域名称 str # 屏蔽上层作用域 def f(): str = 0 def f1(): return str return f1() f(), str (0, str)# 搜索当前模块作用域名称 str # 屏蔽上层作用域 str = &amp;#39;当前模块str&amp;#39; def f(): def f1(): return str return f1() f() &#39;当前模块str&#39;# 搜索最外面作用域名称 str # 删除前面对 str 的绑定 del str # 注意，运行多次会将内置名称 str 都删除 def f(): def f1(): return str return f1() f() str可见，当前模块中的全局名称，最好不要和内置名称相同，它会屏蔽掉内置名称，从而不可以直接使用内置功能。内置名称如下：</description>
    </item>
    <item>
      <title>创建实例</title>
      <link>/python/16_class/11_create_instance/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/16_class/11_create_instance/</guid>
      <description>直接调用类对象，即可创建该类的实例对象。
int() # 调用 int 类 0list(&amp;#39;123&amp;#39;) # 传参调用 list 类 [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]class A: def __init__(self, name): self.name = name def __repr__(self): return self.name A(&amp;#39;实例1&amp;#39;), A(&amp;#39;实例2&amp;#39;) # 调用自定义类 (实例1, 实例2)实例对象是由特殊方法 __new__() 创建，__init__() 定制完成。两个方法是隐式地完成创建和定制的，当然也可以显式地创建并定制。
class A: def __init__(self): self.name = &amp;#39;实例&amp;#39; A # 类对象 A __main__.A# 显式地创建类 A 的一个实例 a a = object.__new__(A) a &amp;lt;__main__.A at 0x20d23e95d30&amp;gt;# 未初始化，无属性 a.name ---------------------------------------------------------------------------AttributeError Traceback (most recent call last)&amp;lt;ipython-input-36-b3a4d04d98fc&amp;gt; in &amp;lt;module&amp;gt;1 # 未初始化，无属性----&amp;gt; 2 a.</description>
    </item>
    <item>
      <title>属性操作</title>
      <link>/python/16_class/12_attribute_operation/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/16_class/12_attribute_operation/</guid>
      <description>Python 是动态语言，对象的属性不仅可以查看、访问、调用，还可以动态地增、删、改。
下面定义一个没有自定义属性的类 A 举例：
dir() 函数查看属性，双下划线 __ 包围的属性是继承自 object 的特殊属性：
# 定义一个类，查看属性 class A: pass dir(A) [&#39;__class__&#39;,&#39;__delattr__&#39;,&#39;__dict__&#39;,&#39;__dir__&#39;,&#39;__doc__&#39;,&#39;__eq__&#39;,&#39;__format__&#39;,&#39;__ge__&#39;,&#39;__getattribute__&#39;,&#39;__gt__&#39;,&#39;__hash__&#39;,&#39;__init__&#39;,&#39;__init_subclass__&#39;,&#39;__le__&#39;,&#39;__lt__&#39;,&#39;__module__&#39;,&#39;__ne__&#39;,&#39;__new__&#39;,&#39;__reduce__&#39;,&#39;__reduce_ex__&#39;,&#39;__repr__&#39;,&#39;__setattr__&#39;,&#39;__sizeof__&#39;,&#39;__str__&#39;,&#39;__subclasshook__&#39;,&#39;__weakref__&#39;]# 访问属性 __class__ 相当于调用 type() 函数 A.__class__, A().__class__ (type, __main__.A)给类 A 及其实例动态添加属性，属性可以是数据属性和方法。类层级添加的属性，将作为所有实例的属性；实例添加的属性，只有对应的实例能访问。
# 添加数据属性 a1 = A() a2 = A() A.a = &amp;#39;类变量&amp;#39; a1.x = &amp;#39;a1 的属性&amp;#39; a2.</description>
    </item>
    <item>
      <title>方法操作</title>
      <link>/python/16_class/13_method_operation/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/16_class/13_method_operation/</guid>
      <description>一个从父类继承过来的方法，如果不满足子类的需求，可以进行重写，重写的方法将屏蔽父类的方法，但可以显示地调用，或使用 super() 委托给父类调用，实现父类、子类的方法都可调用。
class A: def f(self,x): y = x + x print(y) class B(A): def f(self,x): y = (x + x)**2 print(y) b = B() b.f(2) 16# 显示地调用 A.f(b, 2) 4class A: def f(self,x): y = x + x print(y) class B(A): def f(self,x): super().f(x) y = (x + x)**2 print(y) b = B() b.f(2) 416还可使用装饰器修改方法，或添加丰富功能等。
# 将方法定义为静态方法 class C: @staticmethod def f(value): print(value) c = C() c.</description>
    </item>
    <item>
      <title>类继承</title>
      <link>/python/16_class/14_inheritance/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/16_class/14_inheritance/</guid>
      <description>所有的类都继承自 object。被继承的类称为基类（或父类，超类），继承者称为子类。
对于多数应用来说，在最简单的情况下，你可以认为搜索从父类所继承属性的操作是深度优先、从左至右的，当层次结构中存在重叠时不会在同一个类中搜索两次。
class A(): def show(self): print(&amp;#39;A&amp;#39;) class B(A): pass class C(): pass class D(): def show(self): print(&amp;#39;D&amp;#39;) class E(C, B, D): # C -&amp;gt; B -&amp;gt; A -&amp;gt; D pass e = E() e.show() A真实情况比这个更复杂一些；方法解析顺序会动态改变以支持对 super() 的协同调用。这种方式在某些其他多重继承型语言中被称为 后续方法调用，它比单继承型语言中的 super 调用更强大。
动态改变顺序是有必要的，因为所有多重继承的情况都会显示出一个或更多的菱形关联（即至少有一个父类可通过多条路径被最底层类所访问）。例如，所有类都是继承自 object，因此任何多重继承的情况都提供了一条以上的路径可以通向 object。为了确保基类不会被访问一次以上，动态算法会用一种特殊方式将搜索顺序线性化，保留每个类所指定的从左至右的顺序，只调用每个父类一次，并且保持单调（即一个类可以被子类化而不影响其父类的优先顺序）。
总而言之，这些特性使得设计具有多重继承的可靠且可扩展的类成为可能。
一个基类如果有 __init__() 方法，则其所派生的类如果也有 __init__() 方法，就必须显式地调用它以确保实例基类部分的正确初始化：
class A: def __init__(self): self.a = &amp;#39;A&amp;#39; def f(self): print(self.a) class B(A): def __init__(self): self.b = &amp;#39;B&amp;#39; b = B() b.</description>
    </item>
  </channel>
</rss>