<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>字典概述 on jupyter.fun</title>
    <link>/python/07_dictionary/</link>
    <description>Recent content in 字典概述 on jupyter.fun</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 07 Aug 2022 16:07:59 +0800</lastBuildDate><atom:link href="/python/07_dictionary/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>dict.keys 键视图</title>
      <link>/python/07_dictionary/02_dict.keys/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/07_dictionary/02_dict.keys/</guid>
      <description>字典方法 dict.keys()，Python 官方文档描述如下：
help(dict.keys) Help on method_descriptor:keys(...)D.keys() -&amp;gt; a set-like object providing a view on D&#39;s keys返回一个由字典的键组成的动态视图。字典的视图支持成员检测，可以被迭代。
d = {&amp;#39;a&amp;#39;:1, &amp;#39;b&amp;#39;:2} d.keys() dict_keys([&#39;a&#39;, &#39;b&#39;])&amp;#39;a&amp;#39; in d.keys() Truelist(d.keys()) [&#39;a&#39;, &#39;b&#39;]d = {&amp;#39;a&amp;#39;:1, &amp;#39;b&amp;#39;:2} d_view = d.keys() print(d_view) d[&amp;#39;c&amp;#39;] = 3 # 添加元素，视图也动态变化 print(d_view) dict_keys([&#39;a&#39;, &#39;b&#39;])dict_keys([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</description>
    </item>
    <item>
      <title>dict.values 值视图</title>
      <link>/python/07_dictionary/03_dict.values/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/07_dictionary/03_dict.values/</guid>
      <description>字典方法 dict.values()，Python 官方文档描述如下：
help(dict.values) Help on method_descriptor:values(...)D.values() -&amp;gt; an object providing a view on D&#39;s values返回由字典的值组成的动态视图。字典的视图支持成员检测，可以被迭代。
d = {&amp;#39;a&amp;#39;:1, &amp;#39;b&amp;#39;:2} d_view = d.values() print(d_view) d[&amp;#39;c&amp;#39;] = 3 # 添加元素，视图也动态变化 print(d_view) dict_values([1, 2])dict_values([1, 2, 3])1 in d_view True[i for i in d_view] [1, 2, 3]</description>
    </item>
    <item>
      <title>dict.items 键值对视图</title>
      <link>/python/07_dictionary/04_dict.items/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/07_dictionary/04_dict.items/</guid>
      <description>字典方法 dict.items()，Python 官方文档描述如下：
help(dict.items) Help on method_descriptor:items(...)D.items() -&amp;gt; a set-like object providing a view on D&#39;s items返回字典的 (键,值) 元组组成的动态视图。字典的视图支持成员检测，可以被迭代。
d = {&amp;#39;a&amp;#39;:1, &amp;#39;b&amp;#39;:2} d_view = d.items() print(d_view) d[&amp;#39;c&amp;#39;] = 3 # 添加元素，视图也动态变化 print(d_view) dict_items([(&#39;a&#39;, 1), (&#39;b&#39;, 2)])dict_items([(&#39;a&#39;, 1), (&#39;b&#39;, 2), (&#39;c&#39;, 3)])(&amp;#39;a&amp;#39;, 1) in d_view True[k*j for k, j in d_view] [&#39;a&#39;, &#39;bb&#39;, &#39;ccc&#39;]</description>
    </item>
    <item>
      <title>dict.get 获取某个键的值</title>
      <link>/python/07_dictionary/05_dict.get/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/07_dictionary/05_dict.get/</guid>
      <description>字典方法 dict.get()，Python 官方文档描述如下：
help(dict.get) Help on method_descriptor:get(self, key, default=None, /)Return the value for key if key is in the dictionary, else default.获取字典的项目，如果 key 存在于字典中则返回 key 的值，否则返回 default 指定的值，默认为 None。
d = {&amp;#39;a&amp;#39;:1, &amp;#39;b&amp;#39;:2} d.get(&amp;#39;a&amp;#39;) 1print(d.get(&amp;#39;c&amp;#39;)) Noned.get(&amp;#39;c&amp;#39;, 3) 3</description>
    </item>
    <item>
      <title>dict.copy 浅拷贝</title>
      <link>/python/07_dictionary/06_dict.copy/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/07_dictionary/06_dict.copy/</guid>
      <description>字典方法 dict.copy()，Python 官方文档描述如下：
help(dict.copy) Help on method_descriptor:copy(...)D.copy() -&amp;gt; a shallow copy of D返回字典的一个浅拷贝。字典是可变对象，浅拷贝将创建一个新字典，但如果字典中某个 键值对 的值是可变对象，则是同一个对象的多次引用。
d = {&amp;#39;a&amp;#39;:[1,2], &amp;#39;b&amp;#39;:3} print(id(d), d) d1 = d.copy() print(id(d1), d1) 2276967660712 {&#39;a&#39;: [1, 2], &#39;b&#39;: 3}2276967660784 {&#39;a&#39;: [1, 2], &#39;b&#39;: 3}# 同一个对象的多次引用 id(d[&amp;#39;a&amp;#39;]), id(d1[&amp;#39;a&amp;#39;]) (2276966678024, 2276966678024)# 改变一个都会改变 d[&amp;#39;a&amp;#39;].extend(&amp;#39;34&amp;#39;) print(d) print(d1) {&#39;a&#39;: [1, 2, &#39;3&#39;, &#39;4&#39;], &#39;b&#39;: 3}{&#39;a&#39;: [1, 2, &#39;3&#39;, &#39;4&#39;], &#39;b&#39;: 3}</description>
    </item>
    <item>
      <title>dict.pop 删除元素并返回值</title>
      <link>/python/07_dictionary/07_dict.pop/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/07_dictionary/07_dict.pop/</guid>
      <description>字典方法 dict.pop()，Python 官方文档描述如下：
help(dict.pop) Help on method_descriptor:pop(...)D.pop(k[,d]) -&amp;gt; v, remove specified key and return the corresponding value.If key is not found, d is returned if given, otherwise KeyError is raised如果字典的键 k 存在，则移除 k 对应的 键值对，并返回 值；
如果 k 不存在，但指定了可选参数 d，则返回 d；
如果 k 不存在且未指定 d，则引发 KeyError。
d = {&amp;#39;a&amp;#39;:1, &amp;#39;b&amp;#39;:2} d.pop(&amp;#39;a&amp;#39;) 1d = {&amp;#39;a&amp;#39;:1, &amp;#39;b&amp;#39;:2} d.pop(&amp;#39;c&amp;#39;, 3) 3d = {&amp;#39;a&amp;#39;:1, &amp;#39;b&amp;#39;:2} d.pop(&amp;#39;c&amp;#39;) ---------------------------------------------------------------------------KeyError Traceback (most recent call last)&amp;lt;ipython-input-4-1e5ab2c0b86c&amp;gt; in &amp;lt;module&amp;gt;1 d = {&#39;a&#39;:1, &#39;b&#39;:2}----&amp;gt; 2 d.</description>
    </item>
    <item>
      <title>dict.popitem 删除元素并返回键值对</title>
      <link>/python/07_dictionary/08_dict.popitem/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/07_dictionary/08_dict.popitem/</guid>
      <description>字典方法 dict.popitem()，Python 官方文档描述如下：
help(dict.popitem) Help on method_descriptor:popitem(self, /)Remove and return a (key, value) pair as a 2-tuple.Pairs are returned in LIFO (last-in, first-out) order.Raises KeyError if the dict is empty.按 后进先出 的原则，删除字典的元素，并以 (key, value) 元组返回。如果字典为空，则引发 KeyError。
d = {2:2,1:1} d.popitem() (1, 1)d = {} d[1] = 1 d[3] = 3 d[2] = 2 d[3] = 30 # 更新并不改变元素插入顺序 d.popitem(),d.popitem(),d.popitem() ((2, 2), (3, 30), (1, 1))d = {} d.</description>
    </item>
    <item>
      <title>dict.fromkeys 创建字典</title>
      <link>/python/07_dictionary/09_dict.fromkeys/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/07_dictionary/09_dict.fromkeys/</guid>
      <description>字典的方法 fromkeys，Python 官方文档描述如下：
help(dict.fromkeys) Help on built-in function fromkeys:fromkeys(iterable, value=None, /) method of builtins.type instanceCreate a new dictionary with keys from iterable and values set to value.使用可迭代对象 iterable 中的元素作为字典的键，value 为值（默认是 None）创建字典。
dict.fromkeys(&amp;#39;123&amp;#39;) {&#39;1&#39;: None, &#39;2&#39;: None, &#39;3&#39;: None}dict.fromkeys([1,2,3], 0) {1: 0, 2: 0, 3: 0}可迭代对象中不能包含不可哈希对象：
dict.fromkeys([[1],2,3], 0) ---------------------------------------------------------------------------TypeError Traceback (most recent call last)&amp;lt;ipython-input-6-470a0d0c77b4&amp;gt; in &amp;lt;module&amp;gt;----&amp;gt; 1 dict.fromkeys([[1],2,3], 0)TypeError: unhashable type: &#39;list&#39;</description>
    </item>
    <item>
      <title>dict.clear 清空字典元素</title>
      <link>/python/07_dictionary/10_dict.clear/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/07_dictionary/10_dict.clear/</guid>
      <description>字典方法 dict.clear()，Python 官方文档描述如下：
help(dict.clear) Help on method_descriptor:clear(...)D.clear() -&amp;gt; None. Remove all items from D.清空字典元素。
d = {&amp;#39;a&amp;#39;:1, &amp;#39;b&amp;#39;:2} d.clear() d {}该方法是一个过程，返回值为 None。
d = {&amp;#39;a&amp;#39;:1, &amp;#39;b&amp;#39;:2} print(d.clear()) None</description>
    </item>
    <item>
      <title>dict.setdefault 获取或插入元素</title>
      <link>/python/07_dictionary/11_dict.setdefault/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/07_dictionary/11_dict.setdefault/</guid>
      <description>字典方法 dict.setdefault()，Python 官方文档描述如下：
help(dict.setdefault) Help on method_descriptor:setdefault(self, key, default=None, /)Insert key with a value of default if key is not in the dictionary.Return the value for key if key is in the dictionary, else default.如果字典存在键 key，则返回它的值；如果 key 不存在，则插入 key，以 default（默认 None）作为它的值，并返回。
d = {&amp;#39;a&amp;#39;:1, &amp;#39;b&amp;#39;:2} d.setdefault(&amp;#39;a&amp;#39;) 1d.setdefault(&amp;#39;c&amp;#39;, 3) 3d {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3}d.setdefault(&amp;#39;c&amp;#39;, 4) # 如果存在，并不会再次设置 3d {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3}</description>
    </item>
    <item>
      <title>dict.update 更新字典</title>
      <link>/python/07_dictionary/12_dict.update/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/07_dictionary/12_dict.update/</guid>
      <description>字典方法 dict.update()，Python 官方文档描述如下：
help(dict.update) Help on method_descriptor:update(...)D.update([E, ]**F) -&amp;gt; None. Update D from dict/iterable E and F.If E is present and has a .keys() method, then does: for k in E: D[k] = E[k]If E is present and lacks a .keys() method, then does: for k, v in E: D[k] = vIn either case, this is followed by: for k in F: D[k] = F[k]更新字典，键相同，则覆盖原有的值，不同，则增加 键值对 元素。有下列几种情况：</description>
    </item>
    <item>
      <title>字典遍历</title>
      <link>/python/07_dictionary/13_loop_through/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/07_dictionary/13_loop_through/</guid>
      <description>字典是可迭代对象，可以遍历字典的元素。由于字典元素是 键值对，遍历比较特殊。
如果未指定遍历对象，默认遍历字典的键。很多函数将字典作为可迭代对象处理时，也是如此。
d = {&amp;#39;a&amp;#39;:1, &amp;#39;c&amp;#39;:3, &amp;#39;b&amp;#39;:2} for k in d: print(k) acblist(d) [&#39;a&#39;, &#39;c&#39;, &#39;b&#39;]sorted(d) [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]max(d) &#39;c&#39;可以利用字典的视图指定遍历字典的键（默认就是遍历键，可以省略），值 或是 键值对。
d = {&amp;#39;a&amp;#39;:1, &amp;#39;c&amp;#39;:3, &amp;#39;b&amp;#39;:2} for k in d.keys(): # 可以不用视图 print(k) acbd = {&amp;#39;a&amp;#39;:1, &amp;#39;c&amp;#39;:3, &amp;#39;b&amp;#39;:2} for k in d.values(): print(k) 132d = {&amp;#39;a&amp;#39;:1, &amp;#39;c&amp;#39;:3, &amp;#39;b&amp;#39;:2} for k,v in d.items(): print(k,v) a 1c 3b 2# 按值排序后再遍历 d = {&amp;#39;a&amp;#39;:1, &amp;#39;c&amp;#39;:3, &amp;#39;b&amp;#39;:2} for k,v in sorted(d.</description>
    </item>
    <item>
      <title>字典操作符</title>
      <link>/python/07_dictionary/14_operator/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/07_dictionary/14_operator/</guid>
      <description>字典不可以使用比较大小的操作符 &amp;lt;, &amp;lt;=, &amp;gt;= 和 &amp;gt;，会引发 TypeError。
{1:1} &amp;lt; {2:2} ---------------------------------------------------------------------------TypeError Traceback (most recent call last)&amp;lt;ipython-input-1-8ea82599b938&amp;gt; in &amp;lt;module&amp;gt;----&amp;gt; 1 {1:1} &amp;lt; {2:2}TypeError: &#39;&amp;lt;&#39; not supported between instances of &#39;dict&#39; and &#39;dict&#39;字典比较相等时，当且仅当 键值对 都相等时才相等。
{1:1.0, 2:2} == {2:2, True:1} True{1:&amp;#39;1&amp;#39;, 2:2} == {2:2, 1:1} False字典可以使用 ** 操作符进行拆包，拆包后置于新字典中，可以用来更新字典；或拆包后作为关键字参数传递给函数。
{&amp;#39;a&amp;#39;:1, &amp;#39;b&amp;#39;:2, **{&amp;#39;a&amp;#39;:10}} {&#39;a&#39;: 10, &#39;b&#39;: 2}d = {&amp;#39;a&amp;#39;:1, &amp;#39;b&amp;#39;:2} &amp;#39;a={a},b={b}&amp;#39;.format(**d) &#39;a=1,b=2&#39;Python 3.9 新版，实现了两个操作符 | 和 |=：</description>
    </item>
  </channel>
</rss>