<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>序列类型概述 on jupyter.fun</title>
    <link>/python/05_sequence/</link>
    <description>Recent content in 序列类型概述 on jupyter.fun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-ch</language>
    <lastBuildDate>Sun, 07 Aug 2022 16:07:59 +0800</lastBuildDate><atom:link href="/python/05_sequence/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>range 对象</title>
      <link>/python/05_sequence/02_range/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/05_sequence/02_range/</guid>
      <description>range 对象是一个整数等差数列，用内置函数 range() 构造得到，类型是 range：
type(range(3)) rangerange(-1,5,2) range(-1, 5, 2)range 通常用于在 for 循环中循环指定的次数：
for i in range(3): print(&amp;#39;重要的事情说三遍&amp;#39;) 重要的事情说三遍重要的事情说三遍重要的事情说三遍range 对象可以指定起始值（默认 0），结束值（不包含），和等差数列的公差（默认 1）。
指定一个大于 0 的值则默认从 0 开始，公差为 1，到指定值之前一个整数结束：
list(range(5)) [0, 1, 2, 3, 4]因为公差默认为 1，指定一个小于等于 0 的值则得到空 range：
list(range(-5)) []起始值，结束值，公差都指定，则得到相应等差数列：
list(range(1,5)) [1, 2, 3, 4]list(range(1,-5,-1)) [1, 0, -1, -2, -3, -4]range 类型相比常规 list 或 tuple，优势在于一个 range 对象总是占用固定的（较小）内存，不论其所表示的范围有多大。因为 range 类型只保存了 start, stop 和 step 值，并会根据需要计算具体单项或子范围的值。</description>
    </item>
    <item>
      <title>序列索引和切片</title>
      <link>/python/05_sequence/03_index_slice/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/05_sequence/03_index_slice/</guid>
      <description>序列类型都可以使用下标进行索引或切片取值，这是序列类型通用操作。可变序列类型比较特殊，例如列表，可以利用索引或切片进行元素增、删、改，详见 列表的索引和切片。
下标从前往后，则以 0 开始，从后往前，则从 -1 开始，双向索引：
(&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;)0 1 2 3-4 -3 -2 -1 下标索引，直接取出对应索引下的值，超出范围则报错：
a = [1,2,3,4] a[10] ---------------------------------------------------------------------------IndexError Traceback (most recent call last)&amp;lt;ipython-input-18-5680bb375980&amp;gt; in &amp;lt;module&amp;gt;1 a = [1,2,3,4]----&amp;gt; 2 a[10]IndexError: list index out of rangea = [1,2,3,4] a[0], a[-2] (1, 3)下标切片取值规则：[起始:结束:步长]，不包含结束。
没有指定起始，则默认为 0； 没有指定结束则默认到最后一个元素结束； 下标可以双向混合使用； 没有指定步长，则默认为 1； 步长为负数，则反向取值，-1 开始。 a = [1,2,3,4,5,6,7] a[:3] [1, 2, 3]a = [1,2,3,4,5,6,7] a[3:] [4, 5, 6, 7]a = [1,2,3,4,5,6,7] a[1:-3], a[-6:4] ([2, 3, 4], [2, 3, 4])a = [1,2,3,4,5,6,7] a[::2] [1, 3, 5, 7]a = [1,2,3,4,5,6,7] a[::-2] # 默认 -1 开始取 [7, 5, 3, 1]a = [1,2,3,4,5,6,7] a[0:7:-2] []a = [1,2,3,4,5,6,7] a[-1:0:-2] [7, 5, 3]切片范围可以无限大，范围内没有元素，则得到空的容器：</description>
    </item>
    <item>
      <title>序列通用操作</title>
      <link>/python/05_sequence/04_common_operations/</link>
      <pubDate>Sun, 07 Aug 2022 16:07:59 +0800</pubDate>
      <guid>/python/05_sequence/04_common_operations/</guid>
      <description>序列类型有许多通用的操作，在各个知识点都有详细的介绍，下面将他们综合起来比较。
序列类型都可以使用操作符 + 进行拼接，使用 += 拼接并赋值（range 除外），但对于可变序列类型，使用 += 是原地修改：
a = [1,2] print(id(a)) a += [3,4] id(a), a 2612604344328(2612604344328, [1, 2, 3, 4])&amp;#39;12&amp;#39;+&amp;#39;34&amp;#39;, [1,2]+[3,4], (1,2)+(3,4) (&#39;1234&#39;, [1, 2, 3, 4], (1, 2, 3, 4))序列类型都可以使用操作符 * 进行重复并拼接，使用 *= 拼接并赋值（range 除外），但对于可变序列类型，使用 *= 是原地修改：
&amp;#39;1&amp;#39;*2, 2*[1], (1,)*2 (&#39;11&#39;, [1, 1], (1, 1))a = [1] print(id(a)) a *= 2 id(a), a 2612603190024(2612603190024, [1, 1])序列类型都可以使用 * 进行拆包，拆包之后需要包含在列表，元组，集合中，或用于函数传参：
[*(1,2)], (*[1,2],), {*range(1,3)} ([1, 2], (1, 2), {1, 2})print(*&amp;#39;123&amp;#39;) 1 2 3序列类型都可以使用索引或切片操作取值，但对于可变序列类型，还可以使用索引或切片操作进行内容的增、删、改：</description>
    </item>
  </channel>
</rss>